/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// OpenCorporatesSearch
    /// </summary>
    [DataContract]
    public partial class OpenCorporatesSearch :  IEquatable<OpenCorporatesSearch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenCorporatesSearch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenCorporatesSearch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenCorporatesSearch" /> class.
        /// </summary>
        /// <param name="country">Alpha2 code of the country that the company to be searched is registered in (required).</param>
        /// <param name="registrationNumber">Registration number of the company to be searched (required).</param>
        /// <param name="state">State/Province for countries that require it..</param>
        public OpenCorporatesSearch(string country = default(string), string registrationNumber = default(string), string state = default(string))
        {
            this.Country = country;
            this.RegistrationNumber = registrationNumber;
            this.State = state;
        }
        
        /// <summary>
        /// Alpha2 code of the country that the company to be searched is registered in
        /// </summary>
        /// <value>Alpha2 code of the country that the company to be searched is registered in</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Registration number of the company to be searched
        /// </summary>
        /// <value>Registration number of the company to be searched</value>
        [DataMember(Name="registration_number", EmitDefaultValue=false)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// State/Province for countries that require it.
        /// </summary>
        /// <value>State/Province for countries that require it.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The company name that was returned from Open Corporates search
        /// </summary>
        /// <value>The company name that was returned from Open Corporates search</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// The fields that have some problems and don&#39;t pass validation
        /// </summary>
        /// <value>The fields that have some problems and don&#39;t pass validation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, List<ValidationErrorDescription>> Errors { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenCorporatesSearch {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenCorporatesSearch);
        }

        /// <summary>
        /// Returns true if OpenCorporatesSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenCorporatesSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenCorporatesSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
