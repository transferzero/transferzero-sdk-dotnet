/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// The state of the payin method, which can be one of the following:  * &#x60;incomplete&#x60;: Some fields need to be filled in in_details before we can initiate the collection request. * &#x60;initial&#x60;: All required fields in in_details are present and collection process with the sender will start. * &#x60;pending&#x60;: Collection process has been started, waiting for sender to send funds. * &#x60;success&#x60;: Collection succeeded and funds have been cleared. * &#x60;processing&#x60;: Collection succeeded but waiting for funds to fully clear. * &#x60;error&#x60;: Collection failed. No funds received from sender. You can update or retry the PayinMethod. * &#x60;mispaid&#x60;: Collection succeeded but sender sent the wrong amount. * &#x60;canceled&#x60;: The transaction has been canceled and we will refund the sender soon. * &#x60;refunded&#x60;: The sender has been refunded the amount they sent in. * &#x60;exception&#x60;: An exception happened during processing of the collection. Please contact support.
    /// </summary>
    /// <value>The state of the payin method, which can be one of the following:  * &#x60;incomplete&#x60;: Some fields need to be filled in in_details before we can initiate the collection request. * &#x60;initial&#x60;: All required fields in in_details are present and collection process with the sender will start. * &#x60;pending&#x60;: Collection process has been started, waiting for sender to send funds. * &#x60;success&#x60;: Collection succeeded and funds have been cleared. * &#x60;processing&#x60;: Collection succeeded but waiting for funds to fully clear. * &#x60;error&#x60;: Collection failed. No funds received from sender. You can update or retry the PayinMethod. * &#x60;mispaid&#x60;: Collection succeeded but sender sent the wrong amount. * &#x60;canceled&#x60;: The transaction has been canceled and we will refund the sender soon. * &#x60;refunded&#x60;: The sender has been refunded the amount they sent in. * &#x60;exception&#x60;: An exception happened during processing of the collection. Please contact support.</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum PayinMethodState
    {
        /// <summary>
        /// Enum Incomplete for value: incomplete
        /// </summary>
        [EnumMember(Value = "incomplete")]
        Incomplete = 1,

        /// <summary>
        /// Enum Initial for value: initial
        /// </summary>
        [EnumMember(Value = "initial")]
        Initial = 2,

        /// <summary>
        /// Enum Pending for value: pending
        /// </summary>
        [EnumMember(Value = "pending")]
        Pending = 3,

        /// <summary>
        /// Enum Success for value: success
        /// </summary>
        [EnumMember(Value = "success")]
        Success = 4,

        /// <summary>
        /// Enum Processing for value: processing
        /// </summary>
        [EnumMember(Value = "processing")]
        Processing = 5,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        [EnumMember(Value = "error")]
        Error = 6,

        /// <summary>
        /// Enum Mispaid for value: mispaid
        /// </summary>
        [EnumMember(Value = "mispaid")]
        Mispaid = 7,

        /// <summary>
        /// Enum Canceled for value: canceled
        /// </summary>
        [EnumMember(Value = "canceled")]
        Canceled = 8,

        /// <summary>
        /// Enum Refunded for value: refunded
        /// </summary>
        [EnumMember(Value = "refunded")]
        Refunded = 9,

        /// <summary>
        /// Enum Exception for value: exception
        /// </summary>
        [EnumMember(Value = "exception")]
        Exception = 10

    }

}
