/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// EntityUpdateRequest
    /// </summary>
    [DataContract]
    public partial class EntityUpdateRequest :  IEquatable<EntityUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityUpdateRequest" /> class.
        /// </summary>
        /// <param name="entityId">Id of linked entity.</param>
        /// <param name="entityType">Type of entity to update eg. Sender, Company .</param>
        /// <param name="manualFields">Attributes needed to calculate the risk scores for the manual fields.</param>
        public EntityUpdateRequest(Guid? entityId = default(Guid?), string entityType = default(string), Object manualFields = default(Object))
        {
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.ManualFields = manualFields;
        }
        
        /// <summary>
        /// Id of linked entity
        /// </summary>
        /// <value>Id of linked entity</value>
        [DataMember(Name="entity_id", EmitDefaultValue=false)]
        public Guid? EntityId { get; set; }

        /// <summary>
        /// Type of entity to update eg. Sender, Company 
        /// </summary>
        /// <value>Type of entity to update eg. Sender, Company </value>
        [DataMember(Name="entity_type", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Attributes needed to calculate the risk scores for the manual fields
        /// </summary>
        /// <value>Attributes needed to calculate the risk scores for the manual fields</value>
        [DataMember(Name="manual_fields", EmitDefaultValue=false)]
        public Object ManualFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityUpdateRequest {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ManualFields: ").Append(ManualFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityUpdateRequest);
        }

        /// <summary>
        /// Returns true if EntityUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.ManualFields == input.ManualFields ||
                    (this.ManualFields != null &&
                    this.ManualFields.Equals(input.ManualFields))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.ManualFields != null)
                    hashCode = hashCode * 59 + this.ManualFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
