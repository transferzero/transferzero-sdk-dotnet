/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// This contains the details of the sender. The first time a specific sender is used the full details should be provided. Once a sender is created and is used, the next time you MUST only send the ID of the sender. This is so we can match the same sender across multiple transactions for KYC and audit purposes.  Personal Sender Example: &#x60;&#x60;&#x60;json {   // name   \&quot;first_name\&quot;: \&quot;Jane\&quot;,   \&quot;last_name\&quot;: \&quot;Doe\&quot;,    // address   \&quot;country\&quot;: \&quot;US\&quot;,   \&quot;city\&quot;: \&quot;New York\&quot;,   \&quot;street\&quot;: \&quot;20 W 34th St\&quot;,   \&quot;postal_code\&quot;: \&quot;10001\&quot;,   \&quot;address_description\&quot;: \&quot;\&quot;,    // DOB   \&quot;birth_date\&quot;: \&quot;1974-12-24\&quot;,    // Contact Details; You can usually use your company&#39;s contact details here   \&quot;phone_country\&quot;: \&quot;US\&quot;,   \&quot;phone_number\&quot;: \&quot;5555551234\&quot;,   \&quot;email\&quot;: \&quot;info@transferzero.com\&quot;,    // ID of the sender in your system   \&quot;external_id\&quot;: \&quot;Sender:US:234523\&quot;,    // these fields are mandatory, but you can usually leave them with the following default values:   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: {} } &#x60;&#x60;&#x60;  Business Sender Example:  &#x60;&#x60;&#x60;json {   \&quot;type\&quot;: \&quot;business\&quot;,   \&quot;name\&quot;: \&quot;Company name\&quot;,    // Country of Incorporation   \&quot;country\&quot;: \&quot;US\&quot;,    // Trading address of the company   \&quot;trading_country\&quot;: \&quot;US\&quot;,   \&quot;city\&quot;: \&quot;New York\&quot;,   \&quot;street\&quot;: \&quot;20 W 34th St\&quot;,   \&quot;postal_code\&quot;: \&quot;10001\&quot;,   \&quot;address_description\&quot;: \&quot;\&quot;,    // Company Details   \&quot;legal_entity_type\&quot;: \&quot;privately_owned_company\&quot;,   \&quot;registration_date\&quot;: \&quot;2012-01-25\&quot;,   \&quot;registration_number\&quot;: \&quot;VAT1234567\&quot;,   \&quot;nature_of_business\&quot;: \&quot;retail_trade\&quot;,    // Contact Details   \&quot;phone_country\&quot;: \&quot;US\&quot;,   \&quot;phone_number\&quot;: \&quot;5555551234\&quot;,   \&quot;email\&quot;: \&quot;example@home.org\&quot;,    // ID of the sender in your system   \&quot;external_id\&quot;: \&quot;Sender:Business:US:234523\&quot;,    // these fields are mandatory, but you can usually leave them with the following default values:   \&quot;documents\&quot;: [ ],   \&quot;ip\&quot;: \&quot;127.0.0.1\&quot;,   \&quot;metadata\&quot;: {} } &#x60;&#x60;&#x60;  [Sender in the API documentation](https://docs.transferzero.com/docs/transaction-flow/#sender)
    /// </summary>
    [DataContract]
    public partial class Sender :  IEquatable<Sender>, IValidatableObject
    {
        /// <summary>
        /// Type of sender to create - either person or business (defaults to person) 
        /// </summary>
        /// <value>Type of sender to create - either person or business (defaults to person) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Person for value: person
            /// </summary>
            [EnumMember(Value = "person")]
            Person = 1,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 2

        }

        /// <summary>
        /// Type of sender to create - either person or business (defaults to person) 
        /// </summary>
        /// <value>Type of sender to create - either person or business (defaults to person) </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other  Please note for Wizall &#x60;XOF::Cash&#x60; transactions the valid options are: - &#x60;ID&#x60;: National ID - &#x60;PP&#x60;: Passport
        /// </summary>
        /// <value>Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other  Please note for Wizall &#x60;XOF::Cash&#x60; transactions the valid options are: - &#x60;ID&#x60;: National ID - &#x60;PP&#x60;: Passport</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdentificationTypeEnum
        {
            /// <summary>
            /// Enum DL for value: DL
            /// </summary>
            [EnumMember(Value = "DL")]
            DL = 1,

            /// <summary>
            /// Enum PP for value: PP
            /// </summary>
            [EnumMember(Value = "PP")]
            PP = 2,

            /// <summary>
            /// Enum ID for value: ID
            /// </summary>
            [EnumMember(Value = "ID")]
            ID = 3,

            /// <summary>
            /// Enum OT for value: OT
            /// </summary>
            [EnumMember(Value = "OT")]
            OT = 4

        }

        /// <summary>
        /// Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other  Please note for Wizall &#x60;XOF::Cash&#x60; transactions the valid options are: - &#x60;ID&#x60;: National ID - &#x60;PP&#x60;: Passport
        /// </summary>
        /// <value>Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other  Please note for Wizall &#x60;XOF::Cash&#x60; transactions the valid options are: - &#x60;ID&#x60;: National ID - &#x60;PP&#x60;: Passport</value>
        [DataMember(Name="identification_type", EmitDefaultValue=false)]
        public IdentificationTypeEnum? IdentificationType { get; set; }
        /// <summary>
        /// Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations &amp; Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select &#x60;financial_institution&#x60; then the fields &#x60;vat_registration_number&#x60;, &#x60;financial_regulator&#x60; and &#x60;regulatory_licence_number&#x60; will be mandatory as well.
        /// </summary>
        /// <value>Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations &amp; Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select &#x60;financial_institution&#x60; then the fields &#x60;vat_registration_number&#x60;, &#x60;financial_regulator&#x60; and &#x60;regulatory_licence_number&#x60; will be mandatory as well.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalEntityTypeEnum
        {
            /// <summary>
            /// Enum Soleproprietorship for value: sole_proprietorship
            /// </summary>
            [EnumMember(Value = "sole_proprietorship")]
            Soleproprietorship = 1,

            /// <summary>
            /// Enum Partnership for value: partnership
            /// </summary>
            [EnumMember(Value = "partnership")]
            Partnership = 2,

            /// <summary>
            /// Enum Privatelyownedcompany for value: privately_owned_company
            /// </summary>
            [EnumMember(Value = "privately_owned_company")]
            Privatelyownedcompany = 3,

            /// <summary>
            /// Enum Publiclyownedcompany for value: publicly_owned_company
            /// </summary>
            [EnumMember(Value = "publicly_owned_company")]
            Publiclyownedcompany = 4,

            /// <summary>
            /// Enum Governmentownedentity for value: government_owned_entity
            /// </summary>
            [EnumMember(Value = "government_owned_entity")]
            Governmentownedentity = 5,

            /// <summary>
            /// Enum Trust for value: trust
            /// </summary>
            [EnumMember(Value = "trust")]
            Trust = 6,

            /// <summary>
            /// Enum Ngo for value: ngo
            /// </summary>
            [EnumMember(Value = "ngo")]
            Ngo = 7,

            /// <summary>
            /// Enum Clubandsociety for value: club_and_society
            /// </summary>
            [EnumMember(Value = "club_and_society")]
            Clubandsociety = 8,

            /// <summary>
            /// Enum Go for value: go
            /// </summary>
            [EnumMember(Value = "go")]
            Go = 9,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 10,

            /// <summary>
            /// Enum Financialinstitution for value: financial_institution
            /// </summary>
            [EnumMember(Value = "financial_institution")]
            Financialinstitution = 11

        }

        /// <summary>
        /// Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations &amp; Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select &#x60;financial_institution&#x60; then the fields &#x60;vat_registration_number&#x60;, &#x60;financial_regulator&#x60; and &#x60;regulatory_licence_number&#x60; will be mandatory as well.
        /// </summary>
        /// <value>Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations &amp; Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select &#x60;financial_institution&#x60; then the fields &#x60;vat_registration_number&#x60;, &#x60;financial_regulator&#x60; and &#x60;regulatory_licence_number&#x60; will be mandatory as well.</value>
        [DataMember(Name="legal_entity_type", EmitDefaultValue=false)]
        public LegalEntityTypeEnum? LegalEntityType { get; set; }
        /// <summary>
        /// Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies
        /// </summary>
        /// <value>Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NatureOfBusinessEnum
        {
            /// <summary>
            /// Enum Personal for value: personal
            /// </summary>
            [EnumMember(Value = "personal")]
            Personal = 1,

            /// <summary>
            /// Enum Agricultureandhunting for value: agriculture_and_hunting
            /// </summary>
            [EnumMember(Value = "agriculture_and_hunting")]
            Agricultureandhunting = 2,

            /// <summary>
            /// Enum Forestry for value: forestry
            /// </summary>
            [EnumMember(Value = "forestry")]
            Forestry = 3,

            /// <summary>
            /// Enum Fishing for value: fishing
            /// </summary>
            [EnumMember(Value = "fishing")]
            Fishing = 4,

            /// <summary>
            /// Enum Agriculturalbyproducts for value: agricultural_by_products
            /// </summary>
            [EnumMember(Value = "agricultural_by_products")]
            Agriculturalbyproducts = 5,

            /// <summary>
            /// Enum Coalmining for value: coal_mining
            /// </summary>
            [EnumMember(Value = "coal_mining")]
            Coalmining = 6,

            /// <summary>
            /// Enum Oilmining for value: oil_mining
            /// </summary>
            [EnumMember(Value = "oil_mining")]
            Oilmining = 7,

            /// <summary>
            /// Enum Ironoremining for value: iron_ore_mining
            /// </summary>
            [EnumMember(Value = "iron_ore_mining")]
            Ironoremining = 8,

            /// <summary>
            /// Enum Othermetalanddiamondmining for value: other_metal_and_diamond_mining
            /// </summary>
            [EnumMember(Value = "other_metal_and_diamond_mining")]
            Othermetalanddiamondmining = 9,

            /// <summary>
            /// Enum Othermineralmining for value: other_mineral_mining
            /// </summary>
            [EnumMember(Value = "other_mineral_mining")]
            Othermineralmining = 10,

            /// <summary>
            /// Enum Manufacturingoffooddrinktobacco for value: manufacturing_of_food_drink_tobacco
            /// </summary>
            [EnumMember(Value = "manufacturing_of_food_drink_tobacco")]
            Manufacturingoffooddrinktobacco = 11,

            /// <summary>
            /// Enum Manufacturingoftextilesleatherfurfurniture for value: manufacturing_of_textiles_leather_fur_furniture
            /// </summary>
            [EnumMember(Value = "manufacturing_of_textiles_leather_fur_furniture")]
            Manufacturingoftextilesleatherfurfurniture = 12,

            /// <summary>
            /// Enum Manufactureofwoodenproductsfurniture for value: manufacture_of_wooden_products_furniture
            /// </summary>
            [EnumMember(Value = "manufacture_of_wooden_products_furniture")]
            Manufactureofwoodenproductsfurniture = 13,

            /// <summary>
            /// Enum Manufactureofpaperpulpalliedproducts for value: manufacture_of_paper_pulp_allied_products
            /// </summary>
            [EnumMember(Value = "manufacture_of_paper_pulp_allied_products")]
            Manufactureofpaperpulpalliedproducts = 14,

            /// <summary>
            /// Enum Manufactureofchemicalsmedicalpetroleumrubberplasticproducts for value: manufacture_of_chemicals_medical_petroleum_rubber_plastic_products
            /// </summary>
            [EnumMember(Value = "manufacture_of_chemicals_medical_petroleum_rubber_plastic_products")]
            Manufactureofchemicalsmedicalpetroleumrubberplasticproducts = 15,

            /// <summary>
            /// Enum Manufactureofpotterychinaglassstone for value: manufacture_of_pottery_china_glass_stone
            /// </summary>
            [EnumMember(Value = "manufacture_of_pottery_china_glass_stone")]
            Manufactureofpotterychinaglassstone = 16,

            /// <summary>
            /// Enum Manufactureofironsteelnonferrousmetalsbasicindustries for value: manufacture_of_iron_steel_non_ferrous_metals_basic_industries
            /// </summary>
            [EnumMember(Value = "manufacture_of_iron_steel_non_ferrous_metals_basic_industries")]
            Manufactureofironsteelnonferrousmetalsbasicindustries = 17,

            /// <summary>
            /// Enum Manufactureofmetalproductselectricalandscientificengineering for value: manufacture_of_metal_products_electrical_and_scientific_engineering
            /// </summary>
            [EnumMember(Value = "manufacture_of_metal_products_electrical_and_scientific_engineering")]
            Manufactureofmetalproductselectricalandscientificengineering = 18,

            /// <summary>
            /// Enum Manufactureofjewelrymusicalinstrumentstoys for value: manufacture_of_jewelry_musical_instruments_toys
            /// </summary>
            [EnumMember(Value = "manufacture_of_jewelry_musical_instruments_toys")]
            Manufactureofjewelrymusicalinstrumentstoys = 19,

            /// <summary>
            /// Enum Electricitygasandwater for value: electricity_gas_and_water
            /// </summary>
            [EnumMember(Value = "electricity_gas_and_water")]
            Electricitygasandwater = 20,

            /// <summary>
            /// Enum Construction for value: construction
            /// </summary>
            [EnumMember(Value = "construction")]
            Construction = 21,

            /// <summary>
            /// Enum Wholesaletrade for value: wholesale_trade
            /// </summary>
            [EnumMember(Value = "wholesale_trade")]
            Wholesaletrade = 22,

            /// <summary>
            /// Enum Retailtrade for value: retail_trade
            /// </summary>
            [EnumMember(Value = "retail_trade")]
            Retailtrade = 23,

            /// <summary>
            /// Enum Cateringinclhotels for value: catering_incl_hotels
            /// </summary>
            [EnumMember(Value = "catering_incl_hotels")]
            Cateringinclhotels = 24,

            /// <summary>
            /// Enum Transportstorage for value: transport_storage
            /// </summary>
            [EnumMember(Value = "transport_storage")]
            Transportstorage = 25,

            /// <summary>
            /// Enum Communications for value: communications
            /// </summary>
            [EnumMember(Value = "communications")]
            Communications = 26,

            /// <summary>
            /// Enum Financeandholdingcompanies for value: finance_and_holding_companies
            /// </summary>
            [EnumMember(Value = "finance_and_holding_companies")]
            Financeandholdingcompanies = 27,

            /// <summary>
            /// Enum Insurance for value: insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            Insurance = 28,

            /// <summary>
            /// Enum Businessservices for value: business_services
            /// </summary>
            [EnumMember(Value = "business_services")]
            Businessservices = 29,

            /// <summary>
            /// Enum Realestatedevelopmentinvestment for value: real_estate_development_investment
            /// </summary>
            [EnumMember(Value = "real_estate_development_investment")]
            Realestatedevelopmentinvestment = 30,

            /// <summary>
            /// Enum Centralstategovernments for value: central_state_governments
            /// </summary>
            [EnumMember(Value = "central_state_governments")]
            Centralstategovernments = 31,

            /// <summary>
            /// Enum Communityservicesdefencepoliceprisonsetc for value: community_services_defence_police_prisons_etc
            /// </summary>
            [EnumMember(Value = "community_services_defence_police_prisons_etc")]
            Communityservicesdefencepoliceprisonsetc = 32,

            /// <summary>
            /// Enum Socialserviceseducationhealthcare for value: social_services_education_health_care
            /// </summary>
            [EnumMember(Value = "social_services_education_health_care")]
            Socialserviceseducationhealthcare = 33,

            /// <summary>
            /// Enum Personalservicesleisureservices for value: personal_services_leisure_services
            /// </summary>
            [EnumMember(Value = "personal_services_leisure_services")]
            Personalservicesleisureservices = 34,

            /// <summary>
            /// Enum Personalservicesdomesticlaundryrepairs for value: personal_services_domestic_laundry_repairs
            /// </summary>
            [EnumMember(Value = "personal_services_domestic_laundry_repairs")]
            Personalservicesdomesticlaundryrepairs = 35,

            /// <summary>
            /// Enum Personalservicesembassiesinternationalorganisations for value: personal_services_embassies_international_organisations
            /// </summary>
            [EnumMember(Value = "personal_services_embassies_international_organisations")]
            Personalservicesembassiesinternationalorganisations = 36

        }

        /// <summary>
        /// Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies
        /// </summary>
        /// <value>Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies</value>
        [DataMember(Name="nature_of_business", EmitDefaultValue=false)]
        public NatureOfBusinessEnum? NatureOfBusiness { get; set; }
        /// <summary>
        /// The gender of the sender:  - &#x60;M&#x60;: Male - &#x60;F&#x60;: Female - &#x60;O&#x60;: Other
        /// </summary>
        /// <value>The gender of the sender:  - &#x60;M&#x60;: Male - &#x60;F&#x60;: Female - &#x60;O&#x60;: Other</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 3

        }

        /// <summary>
        /// The gender of the sender:  - &#x60;M&#x60;: Male - &#x60;F&#x60;: Female - &#x60;O&#x60;: Other
        /// </summary>
        /// <value>The gender of the sender:  - &#x60;M&#x60;: Male - &#x60;F&#x60;: Female - &#x60;O&#x60;: Other</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sender" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sender() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sender" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">Type of sender to create - either person or business (defaults to person) .</param>
        /// <param name="state">state.</param>
        /// <param name="country">Country of sender in 2-character alpha ISO 3166-2 country format. This is the residential country for personal senders and the country of incorporation for business senders. (required).</param>
        /// <param name="street">Sender&#39;s street (required).</param>
        /// <param name="postalCode">Zip code of sender (required).</param>
        /// <param name="city">Sender&#39;s city (required).</param>
        /// <param name="phoneCountry">Phone country of sender in 2-character alpha ISO 3166-2 country format (required).</param>
        /// <param name="phoneNumber">Phone number of sender (without country callcode).</param>
        /// <param name="email">Email of sender (required).</param>
        /// <param name="ip">IP of sender (required).</param>
        /// <param name="addressDescription">Description of address.</param>
        /// <param name="identificationNumber">Identification number of document used.</param>
        /// <param name="identificationType">Document to be identified. The identification type can be one of the following:  - &#x60;DL&#x60;: Driving License - &#x60;PP&#x60;: International Passport - &#x60;ID&#x60;: National ID - &#x60;OT&#x60;: Other  Please note for Wizall &#x60;XOF::Cash&#x60; transactions the valid options are: - &#x60;ID&#x60;: National ID - &#x60;PP&#x60;: Passport.</param>
        /// <param name="lang">Determines language of the served content. Defaults to English.</param>
        /// <param name="name">Name of sender (used only with a Business sender).</param>
        /// <param name="firstName">First name of sender (used only with a Personal sender).</param>
        /// <param name="middleName">Middle name of sender (used only with a Personal sender).</param>
        /// <param name="lastName">Last name of sender (used only with a Personal sender).</param>
        /// <param name="birthDate">Date of birth of sender (used only with a Personal sender).</param>
        /// <param name="occupation">Occupation of sender (used only with a Personal sender).</param>
        /// <param name="nationality">The nationality of the sender (used only with a Personal sender).</param>
        /// <param name="legalEntityType">Legal entity type (used only with a Business sender)  Available values:   - sole_proprietorship: Sole Proprietorship   - partnership: Partnership   - privately_owned_company: Privately Owned Company (Limited Company)   - publicly_owned_company: Publicly Listed Company (PLC)   - government_owned_entity: Government Owned Entity Trusts   - trust: Foundations &amp; Similar Entities   - ngo: Non-Government Organisations / Charities inc Religious bodies and place of worship   - club_and_society: Clubs and Societies   - go: GO (Majority Owned Subsidiary of State-Owned Company)   - financial_institution: Financial Institution  Please note not all values are acceptable for some our corridors. Please reach out to our sales teams for more information.  Note that if you select &#x60;financial_institution&#x60; then the fields &#x60;vat_registration_number&#x60;, &#x60;financial_regulator&#x60; and &#x60;regulatory_licence_number&#x60; will be mandatory as well..</param>
        /// <param name="registrationDate">The registration date (used only with a Business sender).</param>
        /// <param name="registrationNumber">The registration number (used only with a Business sender).</param>
        /// <param name="natureOfBusiness">Nature of business options (used only with a Business sender)  Available values:   - personal: Personal   - agriculture_and_hunting: Agriculture and Hunting   - forestry: Forestry   - fishing: Fishing   - agricultural_by_products: Agricultural By-Products   - coal_mining: Coal Mining   - oil_mining: Oil Mining   - iron_ore_mining: Iron Ore Mining   - other_metal_and_diamond_mining: Other Metal and Diamond Mining   - other_mineral_mining: Other Mineral Mining   - manufacturing_of_food_drink_tobacco: Manufacture of Food/Drink/Tobacco   - manufacturing_of_textiles_leather_fur_furniture: Manufacture of Textiles/Leather/Fur/Furniture   - manufacture_of_wooden_products_furniture: Manufacture of Wooden Products/Furniture   - manufacture_of_paper_pulp_allied_products: Manufacture of Paper/Pulp/Allied Products   - manufacture_of_chemicals_medical_petroleum_rubber_plastic_products: Manufacture Of Chemicals Medical Petroleum Rubber Plastic Products   - manufacture_of_pottery_china_glass_stone: Manufacture Of Pottery China Glass Stone   - manufacture_of_iron_steel_non_ferrous_metals_basic_industries: Manufacture Of Iron Steel Non-Ferrous Metals Basic Industries   - manufacture_of_metal_products_electrical_and_scientific_engineering: Manufacture Of Metal Products Electrical And Scientific Engineering   - manufacture_of_jewelry_musical_instruments_toys: Manufacture Of Jewelry Musical Instruments Toys   - electricity_gas_and_water: Electricity, Gas And Water   - construction: Construction   - wholesale_trade: Wholesale Trade   - retail_trade: Retail Trade   - catering_incl_hotels: Catering Incl. Hotels   - transport_storage: Transport Storage   - communications: Communications   - finance_and_holding_companies: Finance And Holding Companies   - insurance: Insurance   - business_services: Business Services   - real_estate_development_investment: Real Estate Development Investment   - central_state_governments: Central State Governments   - community_services_defence_police_prisons_etc: Community Services Defence Police Prisons Etc   - social_services_education_health_care: Social Services Education Health Care   - personal_services_leisure_services: Personal Services - Leisure Services   - personal_services_domestic_laundry_repairs: Personal Services - Domestic Laundry Repairs   - personal_services_embassies_international_organisations: Personal Services - Embassies.</param>
        /// <param name="sourceOfFunds">The source of funds.</param>
        /// <param name="customSourceOfFunds">Custom source of funds.</param>
        /// <param name="coreBusinessActivity">The core activity (used only with a Business sender).</param>
        /// <param name="purposeOfOpeningAccount">The purpose for opening their account (used only with a Business sender).</param>
        /// <param name="officePhone">The official phone number (used only with a Business sender).</param>
        /// <param name="vatRegistrationNumber">The VAT registration number (used only with a Business sender).</param>
        /// <param name="financialRegulator">The Financial Regulator (used only with a Business sender).</param>
        /// <param name="regulatoryLicenceNumber">The Regulatory Licence Number (used only with a Business sender).</param>
        /// <param name="contactPersonEmail">The contact&#39;s email address (used only with a Business sender).</param>
        /// <param name="tradingCountry">The Business trading country (used only with a Business sender).</param>
        /// <param name="tradingAddress">The Business trading address (used only with a Business sender).</param>
        /// <param name="numberMonthlyTransactions">The estimated number of monthly transactions (used only with a Business sender).</param>
        /// <param name="amountMonthlyTransactions">The estimated amount for all transactions each month in USD (used only with a Business sender).</param>
        /// <param name="documents">Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: &#x60;\&quot;documents\&quot;: [ ]&#x60; in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. &#x60;&#x60;&#x60;JSON \&quot;documents\&quot;: [   {     \&quot;id\&quot;: \&quot;b6648ba3-1c7b-4f59-8580-684899c84a07\&quot;   } ] &#x60;&#x60;&#x60; (required).</param>
        /// <param name="metadata">Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well..</param>
        /// <param name="onboardingStatus">The onboarding status of the sender.</param>
        /// <param name="politicallyExposedPeople">An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: &#x60;&#x60;&#x60;json   {     \&quot;politically_exposed_person\&quot;: {       \&quot;name\&quot;: \&quot;Ronald Reagan\&quot;,       \&quot;position\&quot;: \&quot;President of the United States\&quot;,       \&quot;started_date\&quot;: \&quot;1981-01-20T00:00:00.000Z\&quot;,       \&quot;ended_date\&quot;: \&quot;1989-01-20T00:00:00.000Z\&quot;,       \&quot;sender_id\&quot;: \&quot;344fb668-196d-43db-9d94-b34b7e6c7e0b\&quot;     }   } &#x60;&#x60;&#x60;.</param>
        /// <param name="externalId">Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not..</param>
        /// <param name="cityOfBirth">City of birth of sender.</param>
        /// <param name="countryOfBirth">Country of birth of sender in 2-character alpha ISO 3166-2 country format.</param>
        /// <param name="gender">The gender of the sender:  - &#x60;M&#x60;: Male - &#x60;F&#x60;: Female - &#x60;O&#x60;: Other.</param>
        /// <param name="salesLeadId">Sales Lead ID for tracking (optional).</param>
        public Sender(Guid? id = default(Guid?), TypeEnum? type = default(TypeEnum?), SenderState state = default(SenderState), string country = default(string), string street = default(string), string postalCode = default(string), string city = default(string), string phoneCountry = default(string), string phoneNumber = default(string), string email = default(string), string ip = default(string), string addressDescription = default(string), string identificationNumber = default(string), IdentificationTypeEnum? identificationType = default(IdentificationTypeEnum?), string lang = default(string), string name = default(string), string firstName = default(string), string middleName = default(string), string lastName = default(string), DateTime? birthDate = default(DateTime?), string occupation = default(string), string nationality = default(string), LegalEntityTypeEnum? legalEntityType = default(LegalEntityTypeEnum?), DateTime? registrationDate = default(DateTime?), string registrationNumber = default(string), NatureOfBusinessEnum? natureOfBusiness = default(NatureOfBusinessEnum?), string sourceOfFunds = default(string), string customSourceOfFunds = default(string), string coreBusinessActivity = default(string), string purposeOfOpeningAccount = default(string), string officePhone = default(string), string vatRegistrationNumber = default(string), string financialRegulator = default(string), string regulatoryLicenceNumber = default(string), string contactPersonEmail = default(string), string tradingCountry = default(string), string tradingAddress = default(string), string numberMonthlyTransactions = default(string), string amountMonthlyTransactions = default(string), List<Document> documents = default(List<Document>), Object metadata = default(Object), string onboardingStatus = default(string), List<PoliticallyExposedPerson> politicallyExposedPeople = default(List<PoliticallyExposedPerson>), string externalId = default(string), string cityOfBirth = default(string), string countryOfBirth = default(string), GenderEnum? gender = default(GenderEnum?), string salesLeadId = default(string))
        {
            this.Country = country;
            this.Street = street;
            this.PostalCode = postalCode;
            this.City = city;
            this.PhoneCountry = phoneCountry;
            this.Email = email;
            this.Ip = ip;
            this.Documents = documents;
            this.Id = id;
            this.Type = type;
            this.State = state;
            this.PhoneNumber = phoneNumber;
            this.AddressDescription = addressDescription;
            this.IdentificationNumber = identificationNumber;
            this.IdentificationType = identificationType;
            this.Lang = lang;
            this.Name = name;
            this.FirstName = firstName;
            this.MiddleName = middleName;
            this.LastName = lastName;
            this.BirthDate = birthDate;
            this.Occupation = occupation;
            this.Nationality = nationality;
            this.LegalEntityType = legalEntityType;
            this.RegistrationDate = registrationDate;
            this.RegistrationNumber = registrationNumber;
            this.NatureOfBusiness = natureOfBusiness;
            this.SourceOfFunds = sourceOfFunds;
            this.CustomSourceOfFunds = customSourceOfFunds;
            this.CoreBusinessActivity = coreBusinessActivity;
            this.PurposeOfOpeningAccount = purposeOfOpeningAccount;
            this.OfficePhone = officePhone;
            this.VatRegistrationNumber = vatRegistrationNumber;
            this.FinancialRegulator = financialRegulator;
            this.RegulatoryLicenceNumber = regulatoryLicenceNumber;
            this.ContactPersonEmail = contactPersonEmail;
            this.TradingCountry = tradingCountry;
            this.TradingAddress = tradingAddress;
            this.NumberMonthlyTransactions = numberMonthlyTransactions;
            this.AmountMonthlyTransactions = amountMonthlyTransactions;
            this.Metadata = metadata;
            this.OnboardingStatus = onboardingStatus;
            this.PoliticallyExposedPeople = politicallyExposedPeople;
            this.ExternalId = externalId;
            this.CityOfBirth = cityOfBirth;
            this.CountryOfBirth = countryOfBirth;
            this.Gender = gender;
            this.SalesLeadId = salesLeadId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public SenderState State { get; set; }

        /// <summary>
        /// Country of sender in 2-character alpha ISO 3166-2 country format. This is the residential country for personal senders and the country of incorporation for business senders.
        /// </summary>
        /// <value>Country of sender in 2-character alpha ISO 3166-2 country format. This is the residential country for personal senders and the country of incorporation for business senders.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Sender&#39;s street
        /// </summary>
        /// <value>Sender&#39;s street</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Zip code of sender
        /// </summary>
        /// <value>Zip code of sender</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Sender&#39;s city
        /// </summary>
        /// <value>Sender&#39;s city</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Phone country of sender in 2-character alpha ISO 3166-2 country format
        /// </summary>
        /// <value>Phone country of sender in 2-character alpha ISO 3166-2 country format</value>
        [DataMember(Name="phone_country", EmitDefaultValue=false)]
        public string PhoneCountry { get; set; }

        /// <summary>
        /// Phone number of sender (without country callcode)
        /// </summary>
        /// <value>Phone number of sender (without country callcode)</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Email of sender
        /// </summary>
        /// <value>Email of sender</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// IP of sender
        /// </summary>
        /// <value>IP of sender</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Description of address
        /// </summary>
        /// <value>Description of address</value>
        [DataMember(Name="address_description", EmitDefaultValue=false)]
        public string AddressDescription { get; set; }

        /// <summary>
        /// Identification number of document used
        /// </summary>
        /// <value>Identification number of document used</value>
        [DataMember(Name="identification_number", EmitDefaultValue=false)]
        public string IdentificationNumber { get; set; }


        /// <summary>
        /// Determines language of the served content. Defaults to English
        /// </summary>
        /// <value>Determines language of the served content. Defaults to English</value>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Name of sender (used only with a Business sender)
        /// </summary>
        /// <value>Name of sender (used only with a Business sender)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// First name of sender (used only with a Personal sender)
        /// </summary>
        /// <value>First name of sender (used only with a Personal sender)</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Middle name of sender (used only with a Personal sender)
        /// </summary>
        /// <value>Middle name of sender (used only with a Personal sender)</value>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Last name of sender (used only with a Personal sender)
        /// </summary>
        /// <value>Last name of sender (used only with a Personal sender)</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Date of birth of sender (used only with a Personal sender)
        /// </summary>
        /// <value>Date of birth of sender (used only with a Personal sender)</value>
        [DataMember(Name="birth_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Occupation of sender (used only with a Personal sender)
        /// </summary>
        /// <value>Occupation of sender (used only with a Personal sender)</value>
        [DataMember(Name="occupation", EmitDefaultValue=false)]
        public string Occupation { get; set; }

        /// <summary>
        /// The nationality of the sender (used only with a Personal sender)
        /// </summary>
        /// <value>The nationality of the sender (used only with a Personal sender)</value>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public string Nationality { get; set; }


        /// <summary>
        /// The registration date (used only with a Business sender)
        /// </summary>
        /// <value>The registration date (used only with a Business sender)</value>
        [DataMember(Name="registration_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// The registration number (used only with a Business sender)
        /// </summary>
        /// <value>The registration number (used only with a Business sender)</value>
        [DataMember(Name="registration_number", EmitDefaultValue=false)]
        public string RegistrationNumber { get; set; }


        /// <summary>
        /// The source of funds
        /// </summary>
        /// <value>The source of funds</value>
        [DataMember(Name="source_of_funds", EmitDefaultValue=false)]
        public string SourceOfFunds { get; set; }

        /// <summary>
        /// Custom source of funds
        /// </summary>
        /// <value>Custom source of funds</value>
        [DataMember(Name="custom_source_of_funds", EmitDefaultValue=false)]
        public string CustomSourceOfFunds { get; set; }

        /// <summary>
        /// The core activity (used only with a Business sender)
        /// </summary>
        /// <value>The core activity (used only with a Business sender)</value>
        [DataMember(Name="core_business_activity", EmitDefaultValue=false)]
        public string CoreBusinessActivity { get; set; }

        /// <summary>
        /// The purpose for opening their account (used only with a Business sender)
        /// </summary>
        /// <value>The purpose for opening their account (used only with a Business sender)</value>
        [DataMember(Name="purpose_of_opening_account", EmitDefaultValue=false)]
        public string PurposeOfOpeningAccount { get; set; }

        /// <summary>
        /// The official phone number (used only with a Business sender)
        /// </summary>
        /// <value>The official phone number (used only with a Business sender)</value>
        [DataMember(Name="office_phone", EmitDefaultValue=false)]
        public string OfficePhone { get; set; }

        /// <summary>
        /// The VAT registration number (used only with a Business sender)
        /// </summary>
        /// <value>The VAT registration number (used only with a Business sender)</value>
        [DataMember(Name="vat_registration_number", EmitDefaultValue=false)]
        public string VatRegistrationNumber { get; set; }

        /// <summary>
        /// The Financial Regulator (used only with a Business sender)
        /// </summary>
        /// <value>The Financial Regulator (used only with a Business sender)</value>
        [DataMember(Name="financial_regulator", EmitDefaultValue=false)]
        public string FinancialRegulator { get; set; }

        /// <summary>
        /// The Regulatory Licence Number (used only with a Business sender)
        /// </summary>
        /// <value>The Regulatory Licence Number (used only with a Business sender)</value>
        [DataMember(Name="regulatory_licence_number", EmitDefaultValue=false)]
        public string RegulatoryLicenceNumber { get; set; }

        /// <summary>
        /// The contact&#39;s email address (used only with a Business sender)
        /// </summary>
        /// <value>The contact&#39;s email address (used only with a Business sender)</value>
        [DataMember(Name="contact_person_email", EmitDefaultValue=false)]
        public string ContactPersonEmail { get; set; }

        /// <summary>
        /// The Business trading country (used only with a Business sender)
        /// </summary>
        /// <value>The Business trading country (used only with a Business sender)</value>
        [DataMember(Name="trading_country", EmitDefaultValue=false)]
        public string TradingCountry { get; set; }

        /// <summary>
        /// The Business trading address (used only with a Business sender)
        /// </summary>
        /// <value>The Business trading address (used only with a Business sender)</value>
        [DataMember(Name="trading_address", EmitDefaultValue=false)]
        public string TradingAddress { get; set; }

        /// <summary>
        /// The estimated number of monthly transactions (used only with a Business sender)
        /// </summary>
        /// <value>The estimated number of monthly transactions (used only with a Business sender)</value>
        [DataMember(Name="number_monthly_transactions", EmitDefaultValue=false)]
        public string NumberMonthlyTransactions { get; set; }

        /// <summary>
        /// The estimated amount for all transactions each month in USD (used only with a Business sender)
        /// </summary>
        /// <value>The estimated amount for all transactions each month in USD (used only with a Business sender)</value>
        [DataMember(Name="amount_monthly_transactions", EmitDefaultValue=false)]
        public string AmountMonthlyTransactions { get; set; }

        /// <summary>
        /// Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: &#x60;\&quot;documents\&quot;: [ ]&#x60; in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. &#x60;&#x60;&#x60;JSON \&quot;documents\&quot;: [   {     \&quot;id\&quot;: \&quot;b6648ba3-1c7b-4f59-8580-684899c84a07\&quot;   } ] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>Needed for KYC checks. Required to approve the sender unless KYC is waived for your account. Please send us an empty list of documents: &#x60;\&quot;documents\&quot;: [ ]&#x60; in the request if KYC has been waived.  If the documents already exist, please send the Document ID eg. &#x60;&#x60;&#x60;JSON \&quot;documents\&quot;: [   {     \&quot;id\&quot;: \&quot;b6648ba3-1c7b-4f59-8580-684899c84a07\&quot;   } ] &#x60;&#x60;&#x60;</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.
        /// </summary>
        /// <value>Metadata of sender. You can store any detail specific to your integration here (for example the local ID of the sender on your end). When requesting sender details you will receive the sent metadata back. Also when sending sender related webhooks you will receive the details stored here as well.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// The fields that have some problems and don&#39;t pass validation
        /// </summary>
        /// <value>The fields that have some problems and don&#39;t pass validation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, List<ValidationErrorDescription>> Errors { get; private set; }

        /// <summary>
        /// The onboarding status of the sender
        /// </summary>
        /// <value>The onboarding status of the sender</value>
        [DataMember(Name="onboarding_status", EmitDefaultValue=false)]
        public string OnboardingStatus { get; set; }

        /// <summary>
        /// An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: &#x60;&#x60;&#x60;json   {     \&quot;politically_exposed_person\&quot;: {       \&quot;name\&quot;: \&quot;Ronald Reagan\&quot;,       \&quot;position\&quot;: \&quot;President of the United States\&quot;,       \&quot;started_date\&quot;: \&quot;1981-01-20T00:00:00.000Z\&quot;,       \&quot;ended_date\&quot;: \&quot;1989-01-20T00:00:00.000Z\&quot;,       \&quot;sender_id\&quot;: \&quot;344fb668-196d-43db-9d94-b34b7e6c7e0b\&quot;     }   } &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>An optional list of politically exposed people, individuals who are or have been entrusted with prominent public functions by a country, for example heads of state or heads of government, senior politicians, senior government, judicial or military officials, senior executives of state owned corporations, important political party officials.  There is a limit of three (3) politically exposed people per Sender.  Politically exposed person example: &#x60;&#x60;&#x60;json   {     \&quot;politically_exposed_person\&quot;: {       \&quot;name\&quot;: \&quot;Ronald Reagan\&quot;,       \&quot;position\&quot;: \&quot;President of the United States\&quot;,       \&quot;started_date\&quot;: \&quot;1981-01-20T00:00:00.000Z\&quot;,       \&quot;ended_date\&quot;: \&quot;1989-01-20T00:00:00.000Z\&quot;,       \&quot;sender_id\&quot;: \&quot;344fb668-196d-43db-9d94-b34b7e6c7e0b\&quot;     }   } &#x60;&#x60;&#x60;</value>
        [DataMember(Name="politically_exposed_people", EmitDefaultValue=false)]
        public List<PoliticallyExposedPerson> PoliticallyExposedPeople { get; set; }

        /// <summary>
        /// Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.
        /// </summary>
        /// <value>Optional ID that is supplied by partner linking it to the partner&#39;s own Sender ID. Note: if present we will validate whether the sent ID is a duplicate in our system or not.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// City of birth of sender
        /// </summary>
        /// <value>City of birth of sender</value>
        [DataMember(Name="city_of_birth", EmitDefaultValue=false)]
        public string CityOfBirth { get; set; }

        /// <summary>
        /// Country of birth of sender in 2-character alpha ISO 3166-2 country format
        /// </summary>
        /// <value>Country of birth of sender in 2-character alpha ISO 3166-2 country format</value>
        [DataMember(Name="country_of_birth", EmitDefaultValue=false)]
        public string CountryOfBirth { get; set; }


        /// <summary>
        /// Sales Lead ID for tracking (optional)
        /// </summary>
        /// <value>Sales Lead ID for tracking (optional)</value>
        [DataMember(Name="sales_lead_id", EmitDefaultValue=false)]
        public string SalesLeadId { get; set; }

        /// <summary>
        /// Date and time of sender was created
        /// </summary>
        /// <value>Date and time of sender was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sender {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PhoneCountry: ").Append(PhoneCountry).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  AddressDescription: ").Append(AddressDescription).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  IdentificationType: ").Append(IdentificationType).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  LegalEntityType: ").Append(LegalEntityType).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  NatureOfBusiness: ").Append(NatureOfBusiness).Append("\n");
            sb.Append("  SourceOfFunds: ").Append(SourceOfFunds).Append("\n");
            sb.Append("  CustomSourceOfFunds: ").Append(CustomSourceOfFunds).Append("\n");
            sb.Append("  CoreBusinessActivity: ").Append(CoreBusinessActivity).Append("\n");
            sb.Append("  PurposeOfOpeningAccount: ").Append(PurposeOfOpeningAccount).Append("\n");
            sb.Append("  OfficePhone: ").Append(OfficePhone).Append("\n");
            sb.Append("  VatRegistrationNumber: ").Append(VatRegistrationNumber).Append("\n");
            sb.Append("  FinancialRegulator: ").Append(FinancialRegulator).Append("\n");
            sb.Append("  RegulatoryLicenceNumber: ").Append(RegulatoryLicenceNumber).Append("\n");
            sb.Append("  ContactPersonEmail: ").Append(ContactPersonEmail).Append("\n");
            sb.Append("  TradingCountry: ").Append(TradingCountry).Append("\n");
            sb.Append("  TradingAddress: ").Append(TradingAddress).Append("\n");
            sb.Append("  NumberMonthlyTransactions: ").Append(NumberMonthlyTransactions).Append("\n");
            sb.Append("  AmountMonthlyTransactions: ").Append(AmountMonthlyTransactions).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  OnboardingStatus: ").Append(OnboardingStatus).Append("\n");
            sb.Append("  PoliticallyExposedPeople: ").Append(PoliticallyExposedPeople).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  CityOfBirth: ").Append(CityOfBirth).Append("\n");
            sb.Append("  CountryOfBirth: ").Append(CountryOfBirth).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  SalesLeadId: ").Append(SalesLeadId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sender);
        }

        /// <summary>
        /// Returns true if Sender instances are equal
        /// </summary>
        /// <param name="input">Instance of Sender to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sender input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PhoneCountry == input.PhoneCountry ||
                    (this.PhoneCountry != null &&
                    this.PhoneCountry.Equals(input.PhoneCountry))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.AddressDescription == input.AddressDescription ||
                    (this.AddressDescription != null &&
                    this.AddressDescription.Equals(input.AddressDescription))
                ) && 
                (
                    this.IdentificationNumber == input.IdentificationNumber ||
                    (this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(input.IdentificationNumber))
                ) && 
                (
                    this.IdentificationType == input.IdentificationType ||
                    (this.IdentificationType != null &&
                    this.IdentificationType.Equals(input.IdentificationType))
                ) && 
                (
                    this.Lang == input.Lang ||
                    (this.Lang != null &&
                    this.Lang.Equals(input.Lang))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Occupation == input.Occupation ||
                    (this.Occupation != null &&
                    this.Occupation.Equals(input.Occupation))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.LegalEntityType == input.LegalEntityType ||
                    (this.LegalEntityType != null &&
                    this.LegalEntityType.Equals(input.LegalEntityType))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.NatureOfBusiness == input.NatureOfBusiness ||
                    (this.NatureOfBusiness != null &&
                    this.NatureOfBusiness.Equals(input.NatureOfBusiness))
                ) && 
                (
                    this.SourceOfFunds == input.SourceOfFunds ||
                    (this.SourceOfFunds != null &&
                    this.SourceOfFunds.Equals(input.SourceOfFunds))
                ) && 
                (
                    this.CustomSourceOfFunds == input.CustomSourceOfFunds ||
                    (this.CustomSourceOfFunds != null &&
                    this.CustomSourceOfFunds.Equals(input.CustomSourceOfFunds))
                ) && 
                (
                    this.CoreBusinessActivity == input.CoreBusinessActivity ||
                    (this.CoreBusinessActivity != null &&
                    this.CoreBusinessActivity.Equals(input.CoreBusinessActivity))
                ) && 
                (
                    this.PurposeOfOpeningAccount == input.PurposeOfOpeningAccount ||
                    (this.PurposeOfOpeningAccount != null &&
                    this.PurposeOfOpeningAccount.Equals(input.PurposeOfOpeningAccount))
                ) && 
                (
                    this.OfficePhone == input.OfficePhone ||
                    (this.OfficePhone != null &&
                    this.OfficePhone.Equals(input.OfficePhone))
                ) && 
                (
                    this.VatRegistrationNumber == input.VatRegistrationNumber ||
                    (this.VatRegistrationNumber != null &&
                    this.VatRegistrationNumber.Equals(input.VatRegistrationNumber))
                ) && 
                (
                    this.FinancialRegulator == input.FinancialRegulator ||
                    (this.FinancialRegulator != null &&
                    this.FinancialRegulator.Equals(input.FinancialRegulator))
                ) && 
                (
                    this.RegulatoryLicenceNumber == input.RegulatoryLicenceNumber ||
                    (this.RegulatoryLicenceNumber != null &&
                    this.RegulatoryLicenceNumber.Equals(input.RegulatoryLicenceNumber))
                ) && 
                (
                    this.ContactPersonEmail == input.ContactPersonEmail ||
                    (this.ContactPersonEmail != null &&
                    this.ContactPersonEmail.Equals(input.ContactPersonEmail))
                ) && 
                (
                    this.TradingCountry == input.TradingCountry ||
                    (this.TradingCountry != null &&
                    this.TradingCountry.Equals(input.TradingCountry))
                ) && 
                (
                    this.TradingAddress == input.TradingAddress ||
                    (this.TradingAddress != null &&
                    this.TradingAddress.Equals(input.TradingAddress))
                ) && 
                (
                    this.NumberMonthlyTransactions == input.NumberMonthlyTransactions ||
                    (this.NumberMonthlyTransactions != null &&
                    this.NumberMonthlyTransactions.Equals(input.NumberMonthlyTransactions))
                ) && 
                (
                    this.AmountMonthlyTransactions == input.AmountMonthlyTransactions ||
                    (this.AmountMonthlyTransactions != null &&
                    this.AmountMonthlyTransactions.Equals(input.AmountMonthlyTransactions))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.OnboardingStatus == input.OnboardingStatus ||
                    (this.OnboardingStatus != null &&
                    this.OnboardingStatus.Equals(input.OnboardingStatus))
                ) && 
                (
                    this.PoliticallyExposedPeople == input.PoliticallyExposedPeople ||
                    this.PoliticallyExposedPeople != null &&
                    this.PoliticallyExposedPeople.SequenceEqual(input.PoliticallyExposedPeople)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.CityOfBirth == input.CityOfBirth ||
                    (this.CityOfBirth != null &&
                    this.CityOfBirth.Equals(input.CityOfBirth))
                ) && 
                (
                    this.CountryOfBirth == input.CountryOfBirth ||
                    (this.CountryOfBirth != null &&
                    this.CountryOfBirth.Equals(input.CountryOfBirth))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.SalesLeadId == input.SalesLeadId ||
                    (this.SalesLeadId != null &&
                    this.SalesLeadId.Equals(input.SalesLeadId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.PhoneCountry != null)
                    hashCode = hashCode * 59 + this.PhoneCountry.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.AddressDescription != null)
                    hashCode = hashCode * 59 + this.AddressDescription.GetHashCode();
                if (this.IdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IdentificationNumber.GetHashCode();
                if (this.IdentificationType != null)
                    hashCode = hashCode * 59 + this.IdentificationType.GetHashCode();
                if (this.Lang != null)
                    hashCode = hashCode * 59 + this.Lang.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.Occupation != null)
                    hashCode = hashCode * 59 + this.Occupation.GetHashCode();
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.LegalEntityType != null)
                    hashCode = hashCode * 59 + this.LegalEntityType.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.NatureOfBusiness != null)
                    hashCode = hashCode * 59 + this.NatureOfBusiness.GetHashCode();
                if (this.SourceOfFunds != null)
                    hashCode = hashCode * 59 + this.SourceOfFunds.GetHashCode();
                if (this.CustomSourceOfFunds != null)
                    hashCode = hashCode * 59 + this.CustomSourceOfFunds.GetHashCode();
                if (this.CoreBusinessActivity != null)
                    hashCode = hashCode * 59 + this.CoreBusinessActivity.GetHashCode();
                if (this.PurposeOfOpeningAccount != null)
                    hashCode = hashCode * 59 + this.PurposeOfOpeningAccount.GetHashCode();
                if (this.OfficePhone != null)
                    hashCode = hashCode * 59 + this.OfficePhone.GetHashCode();
                if (this.VatRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.VatRegistrationNumber.GetHashCode();
                if (this.FinancialRegulator != null)
                    hashCode = hashCode * 59 + this.FinancialRegulator.GetHashCode();
                if (this.RegulatoryLicenceNumber != null)
                    hashCode = hashCode * 59 + this.RegulatoryLicenceNumber.GetHashCode();
                if (this.ContactPersonEmail != null)
                    hashCode = hashCode * 59 + this.ContactPersonEmail.GetHashCode();
                if (this.TradingCountry != null)
                    hashCode = hashCode * 59 + this.TradingCountry.GetHashCode();
                if (this.TradingAddress != null)
                    hashCode = hashCode * 59 + this.TradingAddress.GetHashCode();
                if (this.NumberMonthlyTransactions != null)
                    hashCode = hashCode * 59 + this.NumberMonthlyTransactions.GetHashCode();
                if (this.AmountMonthlyTransactions != null)
                    hashCode = hashCode * 59 + this.AmountMonthlyTransactions.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.OnboardingStatus != null)
                    hashCode = hashCode * 59 + this.OnboardingStatus.GetHashCode();
                if (this.PoliticallyExposedPeople != null)
                    hashCode = hashCode * 59 + this.PoliticallyExposedPeople.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.CityOfBirth != null)
                    hashCode = hashCode * 59 + this.CityOfBirth.GetHashCode();
                if (this.CountryOfBirth != null)
                    hashCode = hashCode * 59 + this.CountryOfBirth.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.SalesLeadId != null)
                    hashCode = hashCode * 59 + this.SalesLeadId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
