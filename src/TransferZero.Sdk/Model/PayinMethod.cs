/* 
 * TransferZero API
 *
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// This describes the specific details on how the funds should be collected from the sender.
    /// </summary>
    [DataContract]
    public partial class PayinMethod :  IEquatable<PayinMethod>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets UxFlow
        /// </summary>
        [DataMember(Name="ux_flow", EmitDefaultValue=false)]
        public PayinMethodUxFlow? UxFlow { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public PayinMethodState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayinMethod" /> class.
        /// </summary>
        /// <param name="type">Describes how the payment should be requested from the sender.  Possible values: - &#x60;GHS::Mobile&#x60;: GHS mobile collections - &#x60;UGX::Mobile&#x60;: UGX mobile collections - &#x60;EUR::Bank&#x60;: EUR IBAN collections - &#x60;GBP::Bank&#x60;: GBP IBAN collections .</param>
        /// <param name="uxFlow">uxFlow.</param>
        /// <param name="inDetails">inDetails.</param>
        /// <param name="state">state.</param>
        /// <param name="stateReasonDetails">stateReasonDetails.</param>
        public PayinMethod(string type = default(string), PayinMethodUxFlow uxFlow = default(PayinMethodUxFlow), PayinMethodDetails inDetails = default(PayinMethodDetails), PayinMethodState state = default(PayinMethodState), StateReasonDetails stateReasonDetails = default(StateReasonDetails))
        {
            this.Type = type;
            this.UxFlow = uxFlow;
            this.InDetails = inDetails;
            this.State = state;
            this.StateReasonDetails = stateReasonDetails;
        }
        
        /// <summary>
        /// Describes how the payment should be requested from the sender.  Possible values: - &#x60;GHS::Mobile&#x60;: GHS mobile collections - &#x60;UGX::Mobile&#x60;: UGX mobile collections - &#x60;EUR::Bank&#x60;: EUR IBAN collections - &#x60;GBP::Bank&#x60;: GBP IBAN collections 
        /// </summary>
        /// <value>Describes how the payment should be requested from the sender.  Possible values: - &#x60;GHS::Mobile&#x60;: GHS mobile collections - &#x60;UGX::Mobile&#x60;: UGX mobile collections - &#x60;EUR::Bank&#x60;: EUR IBAN collections - &#x60;GBP::Bank&#x60;: GBP IBAN collections </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }


        /// <summary>
        /// Gets or Sets InDetails
        /// </summary>
        [DataMember(Name="in_details", EmitDefaultValue=false)]
        public PayinMethodDetails InDetails { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; private set; }


        /// <summary>
        /// Gets or Sets StateReasonDetails
        /// </summary>
        [DataMember(Name="state_reason_details", EmitDefaultValue=false)]
        public StateReasonDetails StateReasonDetails { get; set; }

        /// <summary>
        /// This will contain the description on where to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.
        /// </summary>
        /// <value>This will contain the description on where to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.</value>
        [DataMember(Name="out_details", EmitDefaultValue=false)]
        public Object OutDetails { get; private set; }

        /// <summary>
        /// This will contain the instructions on how to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.
        /// </summary>
        /// <value>This will contain the instructions on how to pay the funds. Please see the [Collections Details](https://docs.transferzero.com/docs/collection-details) in the API documentation on what to expect here.</value>
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public Object Instructions { get; private set; }

        /// <summary>
        /// The fields that have some problems and don&#39;t pass validation
        /// </summary>
        /// <value>The fields that have some problems and don&#39;t pass validation</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, List<ValidationErrorDescription>> Errors { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayinMethod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UxFlow: ").Append(UxFlow).Append("\n");
            sb.Append("  InDetails: ").Append(InDetails).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateReasonDetails: ").Append(StateReasonDetails).Append("\n");
            sb.Append("  OutDetails: ").Append(OutDetails).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayinMethod);
        }

        /// <summary>
        /// Returns true if PayinMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PayinMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayinMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UxFlow == input.UxFlow ||
                    (this.UxFlow != null &&
                    this.UxFlow.Equals(input.UxFlow))
                ) && 
                (
                    this.InDetails == input.InDetails ||
                    (this.InDetails != null &&
                    this.InDetails.Equals(input.InDetails))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateReasonDetails == input.StateReasonDetails ||
                    (this.StateReasonDetails != null &&
                    this.StateReasonDetails.Equals(input.StateReasonDetails))
                ) && 
                (
                    this.OutDetails == input.OutDetails ||
                    (this.OutDetails != null &&
                    this.OutDetails.Equals(input.OutDetails))
                ) && 
                (
                    this.Instructions == input.Instructions ||
                    (this.Instructions != null &&
                    this.Instructions.Equals(input.Instructions))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UxFlow != null)
                    hashCode = hashCode * 59 + this.UxFlow.GetHashCode();
                if (this.InDetails != null)
                    hashCode = hashCode * 59 + this.InDetails.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateReasonDetails != null)
                    hashCode = hashCode * 59 + this.StateReasonDetails.GetHashCode();
                if (this.OutDetails != null)
                    hashCode = hashCode * 59 + this.OutDetails.GetHashCode();
                if (this.Instructions != null)
                    hashCode = hashCode * 59 + this.Instructions.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
