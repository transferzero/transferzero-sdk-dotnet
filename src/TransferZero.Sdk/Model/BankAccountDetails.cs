/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TransferZero.Sdk.Client.OpenAPIDateConverter;

namespace TransferZero.Sdk.Model
{
    /// <summary>
    /// Active Bank Account Details for specified currency.  Business BankAccountDetails Example: &#x60;&#x60;&#x60;json   {     \&quot;id\&quot;:\&quot;ebe9bc0b-f2f6-4ce8-802a-8b79912d041e\&quot;,     \&quot;payin_ccy\&quot;:\&quot;NGN\&quot;,     \&quot;account_name\&quot;:\&quot;NGN Details\&quot;,     \&quot;address\&quot;:\&quot;Test Plot no. Jane Doe Road\&quot;,     \&quot;bank_name\&quot;:\&quot;Standard Test Limited\&quot;,     \&quot;bank_address\&quot;:\&quot;4 Lorem Avenue PO BOX 1022222.\&quot;,     \&quot;iban\&quot;:nil,     \&quot;bic_or_swift\&quot;:nil,     \&quot;sort_code\&quot;:nil,     \&quot;account_number\&quot;:nil,     \&quot;branch_name\&quot;:\&quot;branch_name\&quot;,     \&quot;branch_number\&quot;:nil,     \&quot;branch_code\&quot;:nil,     \&quot;reference\&quot;:nil,     \&quot;status\&quot;:\&quot;unavailable\&quot;,     \&quot;unavailable_message\&quot;:\&quot;Experiencing downtime issues\&quot;   } &#x60;&#x60;&#x60;
    /// </summary>
    [DataContract]
    public partial class BankAccountDetails :  IEquatable<BankAccountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountDetails" /> class.
        /// </summary>
        /// <param name="payinCcy">The currency for the bank account details.</param>
        /// <param name="accountName">The business account name.</param>
        /// <param name="address">The business address.</param>
        /// <param name="bankName">The name of the bank as registered with Central Bank of the country..</param>
        /// <param name="bankAddress">The address of the bank.</param>
        /// <param name="iban">An internationally agreed system of identifying bank accounts across national borders.</param>
        /// <param name="bicOrSwift">Bank Identifier Code.</param>
        /// <param name="sortCode">Domestic bank codes used to route money transfers between financial institutions in the United Kingdom/Ireland..</param>
        /// <param name="accountNumber">A unique string of numbers and, sometimes, letters and other characters that identifies the owner of an account..</param>
        /// <param name="branchName">The name of the branch of the bank.</param>
        /// <param name="branchCode">Unique identifying code for a given branch of a bank.</param>
        /// <param name="reference">A statement from the bank regarding the bank details..</param>
        /// <param name="status">One of available, unavailable, hidden.</param>
        /// <param name="unavailableMessage">Reason for setting the bank status to unavailable.</param>
        public BankAccountDetails(string payinCcy = default(string), string accountName = default(string), string address = default(string), string bankName = default(string), string bankAddress = default(string), string iban = default(string), string bicOrSwift = default(string), string sortCode = default(string), string accountNumber = default(string), string branchName = default(string), string branchCode = default(string), string reference = default(string), string status = default(string), string unavailableMessage = default(string))
        {
            this.PayinCcy = payinCcy;
            this.AccountName = accountName;
            this.Address = address;
            this.BankName = bankName;
            this.BankAddress = bankAddress;
            this.Iban = iban;
            this.BicOrSwift = bicOrSwift;
            this.SortCode = sortCode;
            this.AccountNumber = accountNumber;
            this.BranchName = branchName;
            this.BranchCode = branchCode;
            this.Reference = reference;
            this.Status = status;
            this.UnavailableMessage = unavailableMessage;
        }
        
        /// <summary>
        /// The currency for the bank account details
        /// </summary>
        /// <value>The currency for the bank account details</value>
        [DataMember(Name="payin_ccy", EmitDefaultValue=false)]
        public string PayinCcy { get; set; }

        /// <summary>
        /// The business account name
        /// </summary>
        /// <value>The business account name</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The business address
        /// </summary>
        /// <value>The business address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the bank as registered with Central Bank of the country.
        /// </summary>
        /// <value>The name of the bank as registered with Central Bank of the country.</value>
        [DataMember(Name="bank_name", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// The address of the bank
        /// </summary>
        /// <value>The address of the bank</value>
        [DataMember(Name="bank_address", EmitDefaultValue=false)]
        public string BankAddress { get; set; }

        /// <summary>
        /// An internationally agreed system of identifying bank accounts across national borders
        /// </summary>
        /// <value>An internationally agreed system of identifying bank accounts across national borders</value>
        [DataMember(Name="iban", EmitDefaultValue=false)]
        public string Iban { get; set; }

        /// <summary>
        /// Bank Identifier Code
        /// </summary>
        /// <value>Bank Identifier Code</value>
        [DataMember(Name="bic_or_swift", EmitDefaultValue=false)]
        public string BicOrSwift { get; set; }

        /// <summary>
        /// Domestic bank codes used to route money transfers between financial institutions in the United Kingdom/Ireland.
        /// </summary>
        /// <value>Domestic bank codes used to route money transfers between financial institutions in the United Kingdom/Ireland.</value>
        [DataMember(Name="sort_code", EmitDefaultValue=false)]
        public string SortCode { get; set; }

        /// <summary>
        /// A unique string of numbers and, sometimes, letters and other characters that identifies the owner of an account.
        /// </summary>
        /// <value>A unique string of numbers and, sometimes, letters and other characters that identifies the owner of an account.</value>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The name of the branch of the bank
        /// </summary>
        /// <value>The name of the branch of the bank</value>
        [DataMember(Name="branch_name", EmitDefaultValue=false)]
        public string BranchName { get; set; }

        /// <summary>
        /// Unique identifying code for a given branch of a bank
        /// </summary>
        /// <value>Unique identifying code for a given branch of a bank</value>
        [DataMember(Name="branch_code", EmitDefaultValue=false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// A statement from the bank regarding the bank details.
        /// </summary>
        /// <value>A statement from the bank regarding the bank details.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// One of available, unavailable, hidden
        /// </summary>
        /// <value>One of available, unavailable, hidden</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Reason for setting the bank status to unavailable
        /// </summary>
        /// <value>Reason for setting the bank status to unavailable</value>
        [DataMember(Name="unavailable_message", EmitDefaultValue=false)]
        public string UnavailableMessage { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankAccountDetails {\n");
            sb.Append("  PayinCcy: ").Append(PayinCcy).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankAddress: ").Append(BankAddress).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  BicOrSwift: ").Append(BicOrSwift).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UnavailableMessage: ").Append(UnavailableMessage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountDetails);
        }

        /// <summary>
        /// Returns true if BankAccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayinCcy == input.PayinCcy ||
                    (this.PayinCcy != null &&
                    this.PayinCcy.Equals(input.PayinCcy))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankAddress == input.BankAddress ||
                    (this.BankAddress != null &&
                    this.BankAddress.Equals(input.BankAddress))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.BicOrSwift == input.BicOrSwift ||
                    (this.BicOrSwift != null &&
                    this.BicOrSwift.Equals(input.BicOrSwift))
                ) && 
                (
                    this.SortCode == input.SortCode ||
                    (this.SortCode != null &&
                    this.SortCode.Equals(input.SortCode))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UnavailableMessage == input.UnavailableMessage ||
                    (this.UnavailableMessage != null &&
                    this.UnavailableMessage.Equals(input.UnavailableMessage))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayinCcy != null)
                    hashCode = hashCode * 59 + this.PayinCcy.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankAddress != null)
                    hashCode = hashCode * 59 + this.BankAddress.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.BicOrSwift != null)
                    hashCode = hashCode * 59 + this.BicOrSwift.GetHashCode();
                if (this.SortCode != null)
                    hashCode = hashCode * 59 + this.SortCode.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.BranchName != null)
                    hashCode = hashCode * 59 + this.BranchName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UnavailableMessage != null)
                    hashCode = hashCode * 59 + this.UnavailableMessage.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
