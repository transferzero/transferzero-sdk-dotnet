/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TransferZero.Sdk.Client;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Listing entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>EntityListResponse</returns>
        EntityListResponse GetEntities (string entityType, List<string> ids);

        /// <summary>
        /// Listing entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        ApiResponse<EntityListResponse> GetEntitiesWithHttpInfo (string entityType, List<string> ids);
        /// <summary>
        /// Listing entities by params (rating and/or state)
        /// </summary>
        /// <remarks>
        /// Get a list of entities scoped by the requested params (rating and/or state)
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>EntityListResponse</returns>
        EntityListResponse GetEntitiesByParams (string entityType, string rating = null, string state = null);

        /// <summary>
        /// Listing entities by params (rating and/or state)
        /// </summary>
        /// <remarks>
        /// Get a list of entities scoped by the requested params (rating and/or state)
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        ApiResponse<EntityListResponse> GetEntitiesByParamsWithHttpInfo (string entityType, string rating = null, string state = null);
        /// <summary>
        /// Fetching a entity
        /// </summary>
        /// <remarks>
        /// Returns a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>EntityCreateResponse</returns>
        EntityCreateResponse GetEntity (string entityType, Guid? entityID);

        /// <summary>
        /// Fetching a entity
        /// </summary>
        /// <remarks>
        /// Returns a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of EntityCreateResponse</returns>
        ApiResponse<EntityCreateResponse> GetEntityWithHttpInfo (string entityType, Guid? entityID);
        /// <summary>
        /// Updating an entity
        /// </summary>
        /// <remarks>
        /// Updates a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>EntityUpdateResponse</returns>
        EntityUpdateResponse PatchEntity (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest);

        /// <summary>
        /// Updating an entity
        /// </summary>
        /// <remarks>
        /// Updates a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>ApiResponse of EntityUpdateResponse</returns>
        ApiResponse<EntityUpdateResponse> PatchEntityWithHttpInfo (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest);
        /// <summary>
        /// Creating an entity
        /// </summary>
        /// <remarks>
        /// Creates a new entity. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>EntityCreateResponse</returns>
        EntityCreateResponse PostEntity (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest);

        /// <summary>
        /// Creating an entity
        /// </summary>
        /// <remarks>
        /// Creates a new entity. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>ApiResponse of EntityCreateResponse</returns>
        ApiResponse<EntityCreateResponse> PostEntityWithHttpInfo (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Listing entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>Task of EntityListResponse</returns>
        System.Threading.Tasks.Task<EntityListResponse> GetEntitiesAsync (string entityType, List<string> ids);

        /// <summary>
        /// Listing entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityListResponse>> GetEntitiesAsyncWithHttpInfo (string entityType, List<string> ids);
        /// <summary>
        /// Listing entities by params (rating and/or state)
        /// </summary>
        /// <remarks>
        /// Get a list of entities scoped by the requested params (rating and/or state)
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>Task of EntityListResponse</returns>
        System.Threading.Tasks.Task<EntityListResponse> GetEntitiesByParamsAsync (string entityType, string rating = null, string state = null);

        /// <summary>
        /// Listing entities by params (rating and/or state)
        /// </summary>
        /// <remarks>
        /// Get a list of entities scoped by the requested params (rating and/or state)
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityListResponse>> GetEntitiesByParamsAsyncWithHttpInfo (string entityType, string rating = null, string state = null);
        /// <summary>
        /// Fetching a entity
        /// </summary>
        /// <remarks>
        /// Returns a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of EntityCreateResponse</returns>
        System.Threading.Tasks.Task<EntityCreateResponse> GetEntityAsync (string entityType, Guid? entityID);

        /// <summary>
        /// Fetching a entity
        /// </summary>
        /// <remarks>
        /// Returns a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (EntityCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityCreateResponse>> GetEntityAsyncWithHttpInfo (string entityType, Guid? entityID);
        /// <summary>
        /// Updating an entity
        /// </summary>
        /// <remarks>
        /// Updates a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>Task of EntityUpdateResponse</returns>
        System.Threading.Tasks.Task<EntityUpdateResponse> PatchEntityAsync (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest);

        /// <summary>
        /// Updating an entity
        /// </summary>
        /// <remarks>
        /// Updates a single entity by the Entity ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>Task of ApiResponse (EntityUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityUpdateResponse>> PatchEntityAsyncWithHttpInfo (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest);
        /// <summary>
        /// Creating an entity
        /// </summary>
        /// <remarks>
        /// Creates a new entity. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>Task of EntityCreateResponse</returns>
        System.Threading.Tasks.Task<EntityCreateResponse> PostEntityAsync (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest);

        /// <summary>
        /// Creating an entity
        /// </summary>
        /// <remarks>
        /// Creates a new entity. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>Task of ApiResponse (EntityCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityCreateResponse>> PostEntityAsyncWithHttpInfo (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntitiesApi : IEntitiesApi
    {
        private TransferZero.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitiesApi(String basePath)
        {
            this.Configuration = new TransferZero.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesApi"/> class
        /// </summary>
        /// <returns></returns>
        public EntitiesApi()
        {
            this.Configuration = TransferZero.Sdk.Client.Configuration.Default;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntitiesApi(TransferZero.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TransferZero.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TransferZero.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TransferZero.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Listing entities Get a list of entities
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>EntityListResponse</returns>
        public EntityListResponse GetEntities (string entityType, List<string> ids)
        {
             ApiResponse<EntityListResponse> localVarResponse = GetEntitiesWithHttpInfo(entityType, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing entities Get a list of entities
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        public ApiResponse< EntityListResponse > GetEntitiesWithHttpInfo (string entityType, List<string> ids)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntities");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling EntitiesApi->GetEntities");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        /// Listing entities Get a list of entities
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>Task of EntityListResponse</returns>
        public async System.Threading.Tasks.Task<EntityListResponse> GetEntitiesAsync (string entityType, List<string> ids)
        {
             ApiResponse<EntityListResponse> localVarResponse = await GetEntitiesAsyncWithHttpInfo(entityType, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing entities Get a list of entities
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="ids">Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityListResponse>> GetEntitiesAsyncWithHttpInfo (string entityType, List<string> ids)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntities");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling EntitiesApi->GetEntities");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        /// Listing entities by params (rating and/or state) Get a list of entities scoped by the requested params (rating and/or state)
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>EntityListResponse</returns>
        public EntityListResponse GetEntitiesByParams (string entityType, string rating = null, string state = null)
        {
             ApiResponse<EntityListResponse> localVarResponse = GetEntitiesByParamsWithHttpInfo(entityType, rating, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing entities by params (rating and/or state) Get a list of entities scoped by the requested params (rating and/or state)
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>ApiResponse of EntityListResponse</returns>
        public ApiResponse< EntityListResponse > GetEntitiesByParamsWithHttpInfo (string entityType, string rating = null, string state = null)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntitiesByParams");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (rating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rating", rating)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitiesByParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        /// Listing entities by params (rating and/or state) Get a list of entities scoped by the requested params (rating and/or state)
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>Task of EntityListResponse</returns>
        public async System.Threading.Tasks.Task<EntityListResponse> GetEntitiesByParamsAsync (string entityType, string rating = null, string state = null)
        {
             ApiResponse<EntityListResponse> localVarResponse = await GetEntitiesByParamsAsyncWithHttpInfo(entityType, rating, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing entities by params (rating and/or state) Get a list of entities scoped by the requested params (rating and/or state)
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;</param>
        /// <param name="rating">Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60; (optional)</param>
        /// <param name="state">Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (EntityListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityListResponse>> GetEntitiesByParamsAsyncWithHttpInfo (string entityType, string rating = null, string state = null)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntitiesByParams");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (rating != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rating", rating)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitiesByParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityListResponse)));
        }

        /// <summary>
        /// Fetching a entity Returns a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>EntityCreateResponse</returns>
        public EntityCreateResponse GetEntity (string entityType, Guid? entityID)
        {
             ApiResponse<EntityCreateResponse> localVarResponse = GetEntityWithHttpInfo(entityType, entityID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetching a entity Returns a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>ApiResponse of EntityCreateResponse</returns>
        public ApiResponse< EntityCreateResponse > GetEntityWithHttpInfo (string entityType, Guid? entityID)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->GetEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCreateResponse)));
        }

        /// <summary>
        /// Fetching a entity Returns a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of EntityCreateResponse</returns>
        public async System.Threading.Tasks.Task<EntityCreateResponse> GetEntityAsync (string entityType, Guid? entityID)
        {
             ApiResponse<EntityCreateResponse> localVarResponse = await GetEntityAsyncWithHttpInfo(entityType, entityID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetching a entity Returns a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <returns>Task of ApiResponse (EntityCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityCreateResponse>> GetEntityAsyncWithHttpInfo (string entityType, Guid? entityID)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->GetEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->GetEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCreateResponse)));
        }

        /// <summary>
        /// Updating an entity Updates a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>EntityUpdateResponse</returns>
        public EntityUpdateResponse PatchEntity (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest)
        {
             ApiResponse<EntityUpdateResponse> localVarResponse = PatchEntityWithHttpInfo(entityType, entityID, entityUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating an entity Updates a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>ApiResponse of EntityUpdateResponse</returns>
        public ApiResponse< EntityUpdateResponse > PatchEntityWithHttpInfo (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->PatchEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->PatchEntity");
            // verify the required parameter 'entityUpdateRequest' is set
            if (entityUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'entityUpdateRequest' when calling EntitiesApi->PatchEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter
            if (entityUpdateRequest != null && entityUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityUpdateRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityUpdateResponse)));
        }

        /// <summary>
        /// Updating an entity Updates a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>Task of EntityUpdateResponse</returns>
        public async System.Threading.Tasks.Task<EntityUpdateResponse> PatchEntityAsync (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest)
        {
             ApiResponse<EntityUpdateResponse> localVarResponse = await PatchEntityAsyncWithHttpInfo(entityType, entityID, entityUpdateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating an entity Updates a single entity by the Entity ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityID">ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="entityUpdateRequest"></param>
        /// <returns>Task of ApiResponse (EntityUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityUpdateResponse>> PatchEntityAsyncWithHttpInfo (string entityType, Guid? entityID, EntityUpdateRequest entityUpdateRequest)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->PatchEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->PatchEntity");
            // verify the required parameter 'entityUpdateRequest' is set
            if (entityUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'entityUpdateRequest' when calling EntitiesApi->PatchEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter
            if (entityUpdateRequest != null && entityUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityUpdateRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityUpdateResponse)));
        }

        /// <summary>
        /// Creating an entity Creates a new entity. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>EntityCreateResponse</returns>
        public EntityCreateResponse PostEntity (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest)
        {
             ApiResponse<EntityCreateResponse> localVarResponse = PostEntityWithHttpInfo(entityType, entityID, entityCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an entity Creates a new entity. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>ApiResponse of EntityCreateResponse</returns>
        public ApiResponse< EntityCreateResponse > PostEntityWithHttpInfo (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->PostEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->PostEntity");
            // verify the required parameter 'entityCreateRequest' is set
            if (entityCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'entityCreateRequest' when calling EntitiesApi->PostEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter
            if (entityCreateRequest != null && entityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityCreateRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCreateResponse)));
        }

        /// <summary>
        /// Creating an entity Creates a new entity. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>Task of EntityCreateResponse</returns>
        public async System.Threading.Tasks.Task<EntityCreateResponse> PostEntityAsync (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest)
        {
             ApiResponse<EntityCreateResponse> localVarResponse = await PostEntityAsyncWithHttpInfo(entityType, entityID, entityCreateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating an entity Creates a new entity. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Type of entity to create.</param>
        /// <param name="entityID">ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;</param>
        /// <param name="entityCreateRequest"></param>
        /// <returns>Task of ApiResponse (EntityCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityCreateResponse>> PostEntityAsyncWithHttpInfo (string entityType, Guid? entityID, EntityCreateRequest entityCreateRequest)
        {
            // verify the required parameter 'entityType' is set
            if (entityType == null)
                throw new ApiException(400, "Missing required parameter 'entityType' when calling EntitiesApi->PostEntity");
            // verify the required parameter 'entityID' is set
            if (entityID == null)
                throw new ApiException(400, "Missing required parameter 'entityID' when calling EntitiesApi->PostEntity");
            // verify the required parameter 'entityCreateRequest' is set
            if (entityCreateRequest == null)
                throw new ApiException(400, "Missing required parameter 'entityCreateRequest' when calling EntitiesApi->PostEntity");

            var localVarPath = "/risk_assessment/entities/{Entity Type}/{Entity ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityType != null) localVarPathParams.Add("Entity Type", this.Configuration.ApiClient.ParameterToString(entityType)); // path parameter
            if (entityID != null) localVarPathParams.Add("Entity ID", this.Configuration.ApiClient.ParameterToString(entityID)); // path parameter
            if (entityCreateRequest != null && entityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entityCreateRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityCreateResponse)));
        }

    }
}
