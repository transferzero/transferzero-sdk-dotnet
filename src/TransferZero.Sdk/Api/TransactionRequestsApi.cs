/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TransferZero.Sdk.Client;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionRequestsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adding a document to a transaction request (deprecated)
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse AddDocumentTransactionRequest (Guid? transactionRequestID, Guid? documentId);

        /// <summary>
        /// Adding a document to a transaction request (deprecated)
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> AddDocumentTransactionRequestWithHttpInfo (Guid? transactionRequestID, Guid? documentId);
        /// <summary>
        /// Cancelling a transaction request
        /// </summary>
        /// <remarks>
        /// Cancels a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>TransactionReqResponse</returns>
        TransactionReqResponse CancelTransactionRequest (Guid? transactionRequestID, string reasonCancellation);

        /// <summary>
        /// Cancelling a transaction request
        /// </summary>
        /// <remarks>
        /// Cancels a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        ApiResponse<TransactionReqResponse> CancelTransactionRequestWithHttpInfo (Guid? transactionRequestID, string reasonCancellation);
        /// <summary>
        /// Confirming a transaction request
        /// </summary>
        /// <remarks>
        /// Confirms a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>TransactionReqResponse</returns>
        TransactionReqResponse ConfirmTransactionRequest (Guid? transactionRequestID);

        /// <summary>
        /// Confirming a transaction request
        /// </summary>
        /// <remarks>
        /// Confirms a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        ApiResponse<TransactionReqResponse> ConfirmTransactionRequestWithHttpInfo (Guid? transactionRequestID);
        /// <summary>
        /// Fetching a transaction request
        /// </summary>
        /// <remarks>
        /// Returns a single transaction request by the Transaction Request ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>TransactionReqResponse</returns>
        TransactionReqResponse GetTransactionRequest (Guid? transactionRequestID, bool? versioned = null);

        /// <summary>
        /// Fetching a transaction request
        /// </summary>
        /// <remarks>
        /// Returns a single transaction request by the Transaction Request ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        ApiResponse<TransactionReqResponse> GetTransactionRequestWithHttpInfo (Guid? transactionRequestID, bool? versioned = null);
        /// <summary>
        /// Listing transaction requests
        /// </summary>
        /// <remarks>
        /// Get a list of transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>TransactionReqListResponse</returns>
        TransactionReqListResponse GetTransactionRequests (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null);

        /// <summary>
        /// Listing transaction requests
        /// </summary>
        /// <remarks>
        /// Get a list of transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionReqListResponse</returns>
        ApiResponse<TransactionReqListResponse> GetTransactionRequestsWithHttpInfo (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null);
        /// <summary>
        /// Creating a transaction request
        /// </summary>
        /// <remarks>
        /// Creates a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>TransactionReqResponse</returns>
        TransactionReqResponse PostTransactionRequest (TransactionReqRequest transactionReqRequest);

        /// <summary>
        /// Creating a transaction request
        /// </summary>
        /// <remarks>
        /// Creates a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        ApiResponse<TransactionReqResponse> PostTransactionRequestWithHttpInfo (TransactionReqRequest transactionReqRequest);
        /// <summary>
        /// Adding a document to a transaction request
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>DocumentResponse</returns>
        DocumentResponse RestfulAddDocumentTransactionRequest (Guid? transactionRequestID, Guid? documentID);

        /// <summary>
        /// Adding a document to a transaction request
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        ApiResponse<DocumentResponse> RestfulAddDocumentTransactionRequestWithHttpInfo (Guid? transactionRequestID, Guid? documentID);
        /// <summary>
        /// Specifies the limits for transaction requests
        /// </summary>
        /// <remarks>
        /// Specifies the minimum and maximum limits for transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionReqLimitsResponse</returns>
        TransactionReqLimitsResponse TransactionRequestLimits ();

        /// <summary>
        /// Specifies the limits for transaction requests
        /// </summary>
        /// <remarks>
        /// Specifies the minimum and maximum limits for transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionReqLimitsResponse</returns>
        ApiResponse<TransactionReqLimitsResponse> TransactionRequestLimitsWithHttpInfo ();
        /// <summary>
        /// Validates a transaction request payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction request payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>TransactionReqResponse</returns>
        TransactionReqResponse ValidateTransactionRequests (TransactionReqRequest transactionReqRequest);

        /// <summary>
        /// Validates a transaction request payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction request payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        ApiResponse<TransactionReqResponse> ValidateTransactionRequestsWithHttpInfo (TransactionReqRequest transactionReqRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adding a document to a transaction request (deprecated)
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> AddDocumentTransactionRequestAsync (Guid? transactionRequestID, Guid? documentId);

        /// <summary>
        /// Adding a document to a transaction request (deprecated)
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> AddDocumentTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, Guid? documentId);
        /// <summary>
        /// Cancelling a transaction request
        /// </summary>
        /// <remarks>
        /// Cancels a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>Task of TransactionReqResponse</returns>
        System.Threading.Tasks.Task<TransactionReqResponse> CancelTransactionRequestAsync (Guid? transactionRequestID, string reasonCancellation);

        /// <summary>
        /// Cancelling a transaction request
        /// </summary>
        /// <remarks>
        /// Cancels a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> CancelTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, string reasonCancellation);
        /// <summary>
        /// Confirming a transaction request
        /// </summary>
        /// <remarks>
        /// Confirms a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>Task of TransactionReqResponse</returns>
        System.Threading.Tasks.Task<TransactionReqResponse> ConfirmTransactionRequestAsync (Guid? transactionRequestID);

        /// <summary>
        /// Confirming a transaction request
        /// </summary>
        /// <remarks>
        /// Confirms a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> ConfirmTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID);
        /// <summary>
        /// Fetching a transaction request
        /// </summary>
        /// <remarks>
        /// Returns a single transaction request by the Transaction Request ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>Task of TransactionReqResponse</returns>
        System.Threading.Tasks.Task<TransactionReqResponse> GetTransactionRequestAsync (Guid? transactionRequestID, bool? versioned = null);

        /// <summary>
        /// Fetching a transaction request
        /// </summary>
        /// <remarks>
        /// Returns a single transaction request by the Transaction Request ID
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> GetTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, bool? versioned = null);
        /// <summary>
        /// Listing transaction requests
        /// </summary>
        /// <remarks>
        /// Get a list of transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>Task of TransactionReqListResponse</returns>
        System.Threading.Tasks.Task<TransactionReqListResponse> GetTransactionRequestsAsync (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null);

        /// <summary>
        /// Listing transaction requests
        /// </summary>
        /// <remarks>
        /// Get a list of transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionReqListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqListResponse>> GetTransactionRequestsAsyncWithHttpInfo (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null);
        /// <summary>
        /// Creating a transaction request
        /// </summary>
        /// <remarks>
        /// Creates a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of TransactionReqResponse</returns>
        System.Threading.Tasks.Task<TransactionReqResponse> PostTransactionRequestAsync (TransactionReqRequest transactionReqRequest);

        /// <summary>
        /// Creating a transaction request
        /// </summary>
        /// <remarks>
        /// Creates a new transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> PostTransactionRequestAsyncWithHttpInfo (TransactionReqRequest transactionReqRequest);
        /// <summary>
        /// Adding a document to a transaction request
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>Task of DocumentResponse</returns>
        System.Threading.Tasks.Task<DocumentResponse> RestfulAddDocumentTransactionRequestAsync (Guid? transactionRequestID, Guid? documentID);

        /// <summary>
        /// Adding a document to a transaction request
        /// </summary>
        /// <remarks>
        /// Adds a new document to a transaction request 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> RestfulAddDocumentTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, Guid? documentID);
        /// <summary>
        /// Specifies the limits for transaction requests
        /// </summary>
        /// <remarks>
        /// Specifies the minimum and maximum limits for transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionReqLimitsResponse</returns>
        System.Threading.Tasks.Task<TransactionReqLimitsResponse> TransactionRequestLimitsAsync ();

        /// <summary>
        /// Specifies the limits for transaction requests
        /// </summary>
        /// <remarks>
        /// Specifies the minimum and maximum limits for transaction requests
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionReqLimitsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqLimitsResponse>> TransactionRequestLimitsAsyncWithHttpInfo ();
        /// <summary>
        /// Validates a transaction request payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction request payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of TransactionReqResponse</returns>
        System.Threading.Tasks.Task<TransactionReqResponse> ValidateTransactionRequestsAsync (TransactionReqRequest transactionReqRequest);

        /// <summary>
        /// Validates a transaction request payload
        /// </summary>
        /// <remarks>
        /// Validates fields in a transaction request payload and displays invalid or missing fields
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> ValidateTransactionRequestsAsyncWithHttpInfo (TransactionReqRequest transactionReqRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionRequestsApi : ITransactionRequestsApi
    {
        private TransferZero.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionRequestsApi(String basePath)
        {
            this.Configuration = new TransferZero.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRequestsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransactionRequestsApi()
        {
            this.Configuration = TransferZero.Sdk.Client.Configuration.Default;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionRequestsApi(TransferZero.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TransferZero.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TransferZero.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TransferZero.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adding a document to a transaction request (deprecated) Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse AddDocumentTransactionRequest (Guid? transactionRequestID, Guid? documentId)
        {
             ApiResponse<DocumentResponse> localVarResponse = AddDocumentTransactionRequestWithHttpInfo(transactionRequestID, documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adding a document to a transaction request (deprecated) Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > AddDocumentTransactionRequestWithHttpInfo (Guid? transactionRequestID, Guid? documentId)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->AddDocumentTransactionRequest");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TransactionRequestsApi->AddDocumentTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/add_document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Adding a document to a transaction request (deprecated) Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> AddDocumentTransactionRequestAsync (Guid? transactionRequestID, Guid? documentId)
        {
             ApiResponse<DocumentResponse> localVarResponse = await AddDocumentTransactionRequestAsyncWithHttpInfo(transactionRequestID, documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adding a document to a transaction request (deprecated) Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <param name="documentId">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> AddDocumentTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, Guid? documentId)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->AddDocumentTransactionRequest");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling TransactionRequestsApi->AddDocumentTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/add_document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (documentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "document_id", documentId)); // query parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDocumentTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Cancelling a transaction request Cancels a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>TransactionReqResponse</returns>
        public TransactionReqResponse CancelTransactionRequest (Guid? transactionRequestID, string reasonCancellation)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = CancelTransactionRequestWithHttpInfo(transactionRequestID, reasonCancellation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancelling a transaction request Cancels a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        public ApiResponse< TransactionReqResponse > CancelTransactionRequestWithHttpInfo (Guid? transactionRequestID, string reasonCancellation)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->CancelTransactionRequest");
            // verify the required parameter 'reasonCancellation' is set
            if (reasonCancellation == null)
                throw new ApiException(400, "Missing required parameter 'reasonCancellation' when calling TransactionRequestsApi->CancelTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (reasonCancellation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reason_cancellation", reasonCancellation)); // query parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Cancelling a transaction request Cancels a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>Task of TransactionReqResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqResponse> CancelTransactionRequestAsync (Guid? transactionRequestID, string reasonCancellation)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = await CancelTransactionRequestAsyncWithHttpInfo(transactionRequestID, reasonCancellation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancelling a transaction request Cancels a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;</param>
        /// <param name="reasonCancellation">Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> CancelTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, string reasonCancellation)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->CancelTransactionRequest");
            // verify the required parameter 'reasonCancellation' is set
            if (reasonCancellation == null)
                throw new ApiException(400, "Missing required parameter 'reasonCancellation' when calling TransactionRequestsApi->CancelTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (reasonCancellation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reason_cancellation", reasonCancellation)); // query parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Confirming a transaction request Confirms a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>TransactionReqResponse</returns>
        public TransactionReqResponse ConfirmTransactionRequest (Guid? transactionRequestID)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = ConfirmTransactionRequestWithHttpInfo(transactionRequestID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirming a transaction request Confirms a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        public ApiResponse< TransactionReqResponse > ConfirmTransactionRequestWithHttpInfo (Guid? transactionRequestID)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->ConfirmTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Confirming a transaction request Confirms a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>Task of TransactionReqResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqResponse> ConfirmTransactionRequestAsync (Guid? transactionRequestID)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = await ConfirmTransactionRequestAsyncWithHttpInfo(transactionRequestID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirming a transaction request Confirms a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> ConfirmTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->ConfirmTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Fetching a transaction request Returns a single transaction request by the Transaction Request ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>TransactionReqResponse</returns>
        public TransactionReqResponse GetTransactionRequest (Guid? transactionRequestID, bool? versioned = null)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = GetTransactionRequestWithHttpInfo(transactionRequestID, versioned);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetching a transaction request Returns a single transaction request by the Transaction Request ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        public ApiResponse< TransactionReqResponse > GetTransactionRequestWithHttpInfo (Guid? transactionRequestID, bool? versioned = null)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->GetTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (versioned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versioned", versioned)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Fetching a transaction request Returns a single transaction request by the Transaction Request ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>Task of TransactionReqResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqResponse> GetTransactionRequestAsync (Guid? transactionRequestID, bool? versioned = null)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = await GetTransactionRequestAsyncWithHttpInfo(transactionRequestID, versioned);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetching a transaction request Returns a single transaction request by the Transaction Request ID
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;</param>
        /// <param name="versioned">If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> GetTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, bool? versioned = null)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->GetTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (versioned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versioned", versioned)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Listing transaction requests Get a list of transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>TransactionReqListResponse</returns>
        public TransactionReqListResponse GetTransactionRequests (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null)
        {
             ApiResponse<TransactionReqListResponse> localVarResponse = GetTransactionRequestsWithHttpInfo(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing transaction requests Get a list of transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>ApiResponse of TransactionReqListResponse</returns>
        public ApiResponse< TransactionReqListResponse > GetTransactionRequestsWithHttpInfo (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null)
        {

            var localVarPath = "/transaction_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "currency", currency)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (amountFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount_from", amountFrom)); // query parameter
            if (amountTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount_to", amountTo)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (versioned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versioned", versioned)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (included != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "included", included)); // query parameter
            if (excluded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excluded", excluded)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqListResponse)));
        }

        /// <summary>
        /// Listing transaction requests Get a list of transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>Task of TransactionReqListResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqListResponse> GetTransactionRequestsAsync (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null)
        {
             ApiResponse<TransactionReqListResponse> localVarResponse = await GetTransactionRequestsAsyncWithHttpInfo(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing transaction requests Get a list of transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number to request (defaults to 1) (optional)</param>
        /// <param name="per">The number of results to load per page (defaults to 10) (optional)</param>
        /// <param name="state">Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60; (optional)</param>
        /// <param name="currency">Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60; (optional)</param>
        /// <param name="createdAtFrom">Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60; (optional)</param>
        /// <param name="createdAtTo">Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60; (optional)</param>
        /// <param name="amountFrom">Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60; (optional)</param>
        /// <param name="amountTo">Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60; (optional)</param>
        /// <param name="senderId">Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="versioned">If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60; (optional)</param>
        /// <param name="tag">Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60; (optional)</param>
        /// <param name="ids">Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60; (optional)</param>
        /// <param name="included">Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60; (optional)</param>
        /// <param name="excluded">Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (TransactionReqListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqListResponse>> GetTransactionRequestsAsyncWithHttpInfo (int? page = null, int? per = null, List<string> state = null, List<string> currency = null, string createdAtFrom = null, string createdAtTo = null, string amountFrom = null, string amountTo = null, string senderId = null, bool? versioned = null, List<string> tag = null, List<string> ids = null, List<string> included = null, List<string> excluded = null)
        {

            var localVarPath = "/transaction_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (per != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per", per)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "state", state)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "currency", currency)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (amountFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount_from", amountFrom)); // query parameter
            if (amountTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "amount_to", amountTo)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (versioned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "versioned", versioned)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "tag", tag)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (included != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "included", included)); // query parameter
            if (excluded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "excluded", excluded)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqListResponse)));
        }

        /// <summary>
        /// Creating a transaction request Creates a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>TransactionReqResponse</returns>
        public TransactionReqResponse PostTransactionRequest (TransactionReqRequest transactionReqRequest)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = PostTransactionRequestWithHttpInfo(transactionReqRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a transaction request Creates a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        public ApiResponse< TransactionReqResponse > PostTransactionRequestWithHttpInfo (TransactionReqRequest transactionReqRequest)
        {
            // verify the required parameter 'transactionReqRequest' is set
            if (transactionReqRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionReqRequest' when calling TransactionRequestsApi->PostTransactionRequest");

            var localVarPath = "/transaction_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionReqRequest != null && transactionReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionReqRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Creating a transaction request Creates a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of TransactionReqResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqResponse> PostTransactionRequestAsync (TransactionReqRequest transactionReqRequest)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = await PostTransactionRequestAsyncWithHttpInfo(transactionReqRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a transaction request Creates a new transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> PostTransactionRequestAsyncWithHttpInfo (TransactionReqRequest transactionReqRequest)
        {
            // verify the required parameter 'transactionReqRequest' is set
            if (transactionReqRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionReqRequest' when calling TransactionRequestsApi->PostTransactionRequest");

            var localVarPath = "/transaction_requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionReqRequest != null && transactionReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionReqRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Adding a document to a transaction request Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>DocumentResponse</returns>
        public DocumentResponse RestfulAddDocumentTransactionRequest (Guid? transactionRequestID, Guid? documentID)
        {
             ApiResponse<DocumentResponse> localVarResponse = RestfulAddDocumentTransactionRequestWithHttpInfo(transactionRequestID, documentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adding a document to a transaction request Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>ApiResponse of DocumentResponse</returns>
        public ApiResponse< DocumentResponse > RestfulAddDocumentTransactionRequestWithHttpInfo (Guid? transactionRequestID, Guid? documentID)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->RestfulAddDocumentTransactionRequest");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling TransactionRequestsApi->RestfulAddDocumentTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/documents/{Document ID}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (documentID != null) localVarPathParams.Add("Document ID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestfulAddDocumentTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Adding a document to a transaction request Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>Task of DocumentResponse</returns>
        public async System.Threading.Tasks.Task<DocumentResponse> RestfulAddDocumentTransactionRequestAsync (Guid? transactionRequestID, Guid? documentID)
        {
             ApiResponse<DocumentResponse> localVarResponse = await RestfulAddDocumentTransactionRequestAsyncWithHttpInfo(transactionRequestID, documentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adding a document to a transaction request Adds a new document to a transaction request 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequestID">ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <param name="documentID">The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;</param>
        /// <returns>Task of ApiResponse (DocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponse>> RestfulAddDocumentTransactionRequestAsyncWithHttpInfo (Guid? transactionRequestID, Guid? documentID)
        {
            // verify the required parameter 'transactionRequestID' is set
            if (transactionRequestID == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequestID' when calling TransactionRequestsApi->RestfulAddDocumentTransactionRequest");
            // verify the required parameter 'documentID' is set
            if (documentID == null)
                throw new ApiException(400, "Missing required parameter 'documentID' when calling TransactionRequestsApi->RestfulAddDocumentTransactionRequest");

            var localVarPath = "/transaction_requests/{Transaction Request ID}/documents/{Document ID}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequestID != null) localVarPathParams.Add("Transaction Request ID", this.Configuration.ApiClient.ParameterToString(transactionRequestID)); // path parameter
            if (documentID != null) localVarPathParams.Add("Document ID", this.Configuration.ApiClient.ParameterToString(documentID)); // path parameter

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RestfulAddDocumentTransactionRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponse)));
        }

        /// <summary>
        /// Specifies the limits for transaction requests Specifies the minimum and maximum limits for transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionReqLimitsResponse</returns>
        public TransactionReqLimitsResponse TransactionRequestLimits ()
        {
             ApiResponse<TransactionReqLimitsResponse> localVarResponse = TransactionRequestLimitsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Specifies the limits for transaction requests Specifies the minimum and maximum limits for transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionReqLimitsResponse</returns>
        public ApiResponse< TransactionReqLimitsResponse > TransactionRequestLimitsWithHttpInfo ()
        {

            var localVarPath = "/transaction_requests/limits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionRequestLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqLimitsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqLimitsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqLimitsResponse)));
        }

        /// <summary>
        /// Specifies the limits for transaction requests Specifies the minimum and maximum limits for transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionReqLimitsResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqLimitsResponse> TransactionRequestLimitsAsync ()
        {
             ApiResponse<TransactionReqLimitsResponse> localVarResponse = await TransactionRequestLimitsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Specifies the limits for transaction requests Specifies the minimum and maximum limits for transaction requests
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionReqLimitsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqLimitsResponse>> TransactionRequestLimitsAsyncWithHttpInfo ()
        {

            var localVarPath = "/transaction_requests/limits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionRequestLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqLimitsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqLimitsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqLimitsResponse)));
        }

        /// <summary>
        /// Validates a transaction request payload Validates fields in a transaction request payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>TransactionReqResponse</returns>
        public TransactionReqResponse ValidateTransactionRequests (TransactionReqRequest transactionReqRequest)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = ValidateTransactionRequestsWithHttpInfo(transactionReqRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates a transaction request payload Validates fields in a transaction request payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>ApiResponse of TransactionReqResponse</returns>
        public ApiResponse< TransactionReqResponse > ValidateTransactionRequestsWithHttpInfo (TransactionReqRequest transactionReqRequest)
        {
            // verify the required parameter 'transactionReqRequest' is set
            if (transactionReqRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionReqRequest' when calling TransactionRequestsApi->ValidateTransactionRequests");

            var localVarPath = "/transaction_requests/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionReqRequest != null && transactionReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionReqRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTransactionRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

        /// <summary>
        /// Validates a transaction request payload Validates fields in a transaction request payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of TransactionReqResponse</returns>
        public async System.Threading.Tasks.Task<TransactionReqResponse> ValidateTransactionRequestsAsync (TransactionReqRequest transactionReqRequest)
        {
             ApiResponse<TransactionReqResponse> localVarResponse = await ValidateTransactionRequestsAsyncWithHttpInfo(transactionReqRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates a transaction request payload Validates fields in a transaction request payload and displays invalid or missing fields
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionReqRequest"></param>
        /// <returns>Task of ApiResponse (TransactionReqResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionReqResponse>> ValidateTransactionRequestsAsyncWithHttpInfo (TransactionReqRequest transactionReqRequest)
        {
            // verify the required parameter 'transactionReqRequest' is set
            if (transactionReqRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionReqRequest' when calling TransactionRequestsApi->ValidateTransactionRequests");

            var localVarPath = "/transaction_requests/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionReqRequest != null && transactionReqRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionReqRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionReqRequest; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTransactionRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionReqResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionReqResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionReqResponse)));
        }

    }
}
