/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TransferZero.Sdk.Client;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliticallyExposedPeopleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deleting a politically exposed person
        /// </summary>
        /// <remarks>
        /// Deletes a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns></returns>
        void DeletePoliticallyExposedPerson (int? politicallyExposedPersonID);

        /// <summary>
        /// Deleting a politically exposed person
        /// </summary>
        /// <remarks>
        /// Deletes a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID);
        /// <summary>
        /// Listing Politically Exposed People
        /// </summary>
        /// <remarks>
        /// Get a list of politically exposed people
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>PoliticallyExposedPersonListResponse</returns>
        PoliticallyExposedPersonListResponse GetPoliticallyExposedPeople (Guid? senderId = null);

        /// <summary>
        /// Listing Politically Exposed People
        /// </summary>
        /// <remarks>
        /// Get a list of politically exposed people
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>ApiResponse of PoliticallyExposedPersonListResponse</returns>
        ApiResponse<PoliticallyExposedPersonListResponse> GetPoliticallyExposedPeopleWithHttpInfo (Guid? senderId = null);
        /// <summary>
        /// Fetching a politically exposed person
        /// </summary>
        /// <remarks>
        /// Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        PoliticallyExposedPersonResponse GetPoliticallyExposedPerson (int? politicallyExposedPersonID, Guid? senderId = null);

        /// <summary>
        /// Fetching a politically exposed person
        /// </summary>
        /// <remarks>
        /// Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        ApiResponse<PoliticallyExposedPersonResponse> GetPoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID, Guid? senderId = null);
        /// <summary>
        /// Updating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Updates a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        PoliticallyExposedPersonResponse PatchPoliticallyExposedPerson (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson);

        /// <summary>
        /// Updating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Updates a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        ApiResponse<PoliticallyExposedPersonResponse> PatchPoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson);
        /// <summary>
        /// Creating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Creates a new politically exposed person in our system. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        PoliticallyExposedPersonResponse PostPoliticallyExposedPeople (PoliticallyExposedPerson politicallyExposedPerson);

        /// <summary>
        /// Creating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Creates a new politically exposed person in our system. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        ApiResponse<PoliticallyExposedPersonResponse> PostPoliticallyExposedPeopleWithHttpInfo (PoliticallyExposedPerson politicallyExposedPerson);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deleting a politically exposed person
        /// </summary>
        /// <remarks>
        /// Deletes a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePoliticallyExposedPersonAsync (int? politicallyExposedPersonID);

        /// <summary>
        /// Deleting a politically exposed person
        /// </summary>
        /// <remarks>
        /// Deletes a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID);
        /// <summary>
        /// Listing Politically Exposed People
        /// </summary>
        /// <remarks>
        /// Get a list of politically exposed people
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>Task of PoliticallyExposedPersonListResponse</returns>
        System.Threading.Tasks.Task<PoliticallyExposedPersonListResponse> GetPoliticallyExposedPeopleAsync (Guid? senderId = null);

        /// <summary>
        /// Listing Politically Exposed People
        /// </summary>
        /// <remarks>
        /// Get a list of politically exposed people
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonListResponse>> GetPoliticallyExposedPeopleAsyncWithHttpInfo (Guid? senderId = null);
        /// <summary>
        /// Fetching a politically exposed person
        /// </summary>
        /// <remarks>
        /// Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> GetPoliticallyExposedPersonAsync (int? politicallyExposedPersonID, Guid? senderId = null);

        /// <summary>
        /// Fetching a politically exposed person
        /// </summary>
        /// <remarks>
        /// Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> GetPoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID, Guid? senderId = null);
        /// <summary>
        /// Updating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Updates a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> PatchPoliticallyExposedPersonAsync (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson);

        /// <summary>
        /// Updating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Updates a single politically exposed person given the PEP ID.
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> PatchPoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson);
        /// <summary>
        /// Creating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Creates a new politically exposed person in our system. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> PostPoliticallyExposedPeopleAsync (PoliticallyExposedPerson politicallyExposedPerson);

        /// <summary>
        /// Creating a politically exposed person
        /// </summary>
        /// <remarks>
        /// Creates a new politically exposed person in our system. 
        /// </remarks>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> PostPoliticallyExposedPeopleAsyncWithHttpInfo (PoliticallyExposedPerson politicallyExposedPerson);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliticallyExposedPeopleApi : IPoliticallyExposedPeopleApi
    {
        private TransferZero.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticallyExposedPeopleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliticallyExposedPeopleApi(String basePath)
        {
            this.Configuration = new TransferZero.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticallyExposedPeopleApi"/> class
        /// </summary>
        /// <returns></returns>
        public PoliticallyExposedPeopleApi()
        {
            this.Configuration = TransferZero.Sdk.Client.Configuration.Default;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticallyExposedPeopleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliticallyExposedPeopleApi(TransferZero.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TransferZero.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TransferZero.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TransferZero.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TransferZero.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deleting a politically exposed person Deletes a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns></returns>
        public void DeletePoliticallyExposedPerson (int? politicallyExposedPersonID)
        {
             DeletePoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID);
        }

        /// <summary>
        /// Deleting a politically exposed person Deletes a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->DeletePoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deleting a politically exposed person Deletes a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePoliticallyExposedPersonAsync (int? politicallyExposedPersonID)
        {
             await DeletePoliticallyExposedPersonAsyncWithHttpInfo(politicallyExposedPersonID);

        }

        /// <summary>
        /// Deleting a politically exposed person Deletes a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->DeletePoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter

            var request = new RestRequest(localVarPath, Method.DELETE);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "DELETE", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Listing Politically Exposed People Get a list of politically exposed people
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>PoliticallyExposedPersonListResponse</returns>
        public PoliticallyExposedPersonListResponse GetPoliticallyExposedPeople (Guid? senderId = null)
        {
             ApiResponse<PoliticallyExposedPersonListResponse> localVarResponse = GetPoliticallyExposedPeopleWithHttpInfo(senderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listing Politically Exposed People Get a list of politically exposed people
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>ApiResponse of PoliticallyExposedPersonListResponse</returns>
        public ApiResponse< PoliticallyExposedPersonListResponse > GetPoliticallyExposedPeopleWithHttpInfo (Guid? senderId = null)
        {

            var localVarPath = "/politically_exposed_people";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoliticallyExposedPeople", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonListResponse)));
        }

        /// <summary>
        /// Listing Politically Exposed People Get a list of politically exposed people
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>Task of PoliticallyExposedPersonListResponse</returns>
        public async System.Threading.Tasks.Task<PoliticallyExposedPersonListResponse> GetPoliticallyExposedPeopleAsync (Guid? senderId = null)
        {
             ApiResponse<PoliticallyExposedPersonListResponse> localVarResponse = await GetPoliticallyExposedPeopleAsyncWithHttpInfo(senderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listing Politically Exposed People Get a list of politically exposed people
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonListResponse>> GetPoliticallyExposedPeopleAsyncWithHttpInfo (Guid? senderId = null)
        {

            var localVarPath = "/politically_exposed_people";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoliticallyExposedPeople", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonListResponse)));
        }

        /// <summary>
        /// Fetching a politically exposed person Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        public PoliticallyExposedPersonResponse GetPoliticallyExposedPerson (int? politicallyExposedPersonID, Guid? senderId = null)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = GetPoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID, senderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetching a politically exposed person Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        public ApiResponse< PoliticallyExposedPersonResponse > GetPoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID, Guid? senderId = null)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->GetPoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

        /// <summary>
        /// Fetching a politically exposed person Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        public async System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> GetPoliticallyExposedPersonAsync (int? politicallyExposedPersonID, Guid? senderId = null)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = await GetPoliticallyExposedPersonAsyncWithHttpInfo(politicallyExposedPersonID, senderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetching a politically exposed person Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;</param>
        /// <param name="senderId">The ID of the Sender to whom the politically exposed person is attached to. (optional)</param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> GetPoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID, Guid? senderId = null)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->GetPoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter

            var request = new RestRequest(localVarPath, Method.GET);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "GET", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

        /// <summary>
        /// Updating a politically exposed person Updates a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        public PoliticallyExposedPersonResponse PatchPoliticallyExposedPerson (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = PatchPoliticallyExposedPersonWithHttpInfo(politicallyExposedPersonID, politicallyExposedPerson);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a politically exposed person Updates a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        public ApiResponse< PoliticallyExposedPersonResponse > PatchPoliticallyExposedPersonWithHttpInfo (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->PatchPoliticallyExposedPerson");
            // verify the required parameter 'politicallyExposedPerson' is set
            if (politicallyExposedPerson == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPerson' when calling PoliticallyExposedPeopleApi->PatchPoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter
            if (politicallyExposedPerson != null && politicallyExposedPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(politicallyExposedPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = politicallyExposedPerson; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

        /// <summary>
        /// Updating a politically exposed person Updates a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        public async System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> PatchPoliticallyExposedPersonAsync (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = await PatchPoliticallyExposedPersonAsyncWithHttpInfo(politicallyExposedPersonID, politicallyExposedPerson);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a politically exposed person Updates a single politically exposed person given the PEP ID.
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPersonID">The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;</param>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> PatchPoliticallyExposedPersonAsyncWithHttpInfo (int? politicallyExposedPersonID, PoliticallyExposedPerson politicallyExposedPerson)
        {
            // verify the required parameter 'politicallyExposedPersonID' is set
            if (politicallyExposedPersonID == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPersonID' when calling PoliticallyExposedPeopleApi->PatchPoliticallyExposedPerson");
            // verify the required parameter 'politicallyExposedPerson' is set
            if (politicallyExposedPerson == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPerson' when calling PoliticallyExposedPeopleApi->PatchPoliticallyExposedPerson");

            var localVarPath = "/politically_exposed_people/{PoliticallyExposedPerson ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPersonID != null) localVarPathParams.Add("PoliticallyExposedPerson ID", this.Configuration.ApiClient.ParameterToString(politicallyExposedPersonID)); // path parameter
            if (politicallyExposedPerson != null && politicallyExposedPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(politicallyExposedPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = politicallyExposedPerson; // byte array
            }

            var request = new RestRequest(localVarPath, Method.PATCH);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "PATCH", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPoliticallyExposedPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

        /// <summary>
        /// Creating a politically exposed person Creates a new politically exposed person in our system. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>PoliticallyExposedPersonResponse</returns>
        public PoliticallyExposedPersonResponse PostPoliticallyExposedPeople (PoliticallyExposedPerson politicallyExposedPerson)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = PostPoliticallyExposedPeopleWithHttpInfo(politicallyExposedPerson);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a politically exposed person Creates a new politically exposed person in our system. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>ApiResponse of PoliticallyExposedPersonResponse</returns>
        public ApiResponse< PoliticallyExposedPersonResponse > PostPoliticallyExposedPeopleWithHttpInfo (PoliticallyExposedPerson politicallyExposedPerson)
        {
            // verify the required parameter 'politicallyExposedPerson' is set
            if (politicallyExposedPerson == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPerson' when calling PoliticallyExposedPeopleApi->PostPoliticallyExposedPeople");

            var localVarPath = "/politically_exposed_people";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPerson != null && politicallyExposedPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(politicallyExposedPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = politicallyExposedPerson; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path and query parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPoliticallyExposedPeople", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

        /// <summary>
        /// Creating a politically exposed person Creates a new politically exposed person in our system. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of PoliticallyExposedPersonResponse</returns>
        public async System.Threading.Tasks.Task<PoliticallyExposedPersonResponse> PostPoliticallyExposedPeopleAsync (PoliticallyExposedPerson politicallyExposedPerson)
        {
             ApiResponse<PoliticallyExposedPersonResponse> localVarResponse = await PostPoliticallyExposedPeopleAsyncWithHttpInfo(politicallyExposedPerson);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a politically exposed person Creates a new politically exposed person in our system. 
        /// </summary>
        /// <exception cref="TransferZero.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="politicallyExposedPerson"></param>
        /// <returns>Task of ApiResponse (PoliticallyExposedPersonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PoliticallyExposedPersonResponse>> PostPoliticallyExposedPeopleAsyncWithHttpInfo (PoliticallyExposedPerson politicallyExposedPerson)
        {
            // verify the required parameter 'politicallyExposedPerson' is set
            if (politicallyExposedPerson == null)
                throw new ApiException(400, "Missing required parameter 'politicallyExposedPerson' when calling PoliticallyExposedPeopleApi->PostPoliticallyExposedPeople");

            var localVarPath = "/politically_exposed_people";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (politicallyExposedPerson != null && politicallyExposedPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(politicallyExposedPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = politicallyExposedPerson; // byte array
            }

            var request = new RestRequest(localVarPath, Method.POST);

            // add path parameter, if any
            foreach (var param in localVarPathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);

            foreach (var param in localVarQueryParams)
                request.AddQueryParameter(param.Key, param.Value);

            // generate full URL
            string fullUri = this.Configuration.ApiClient.RestClient.BuildUri(request).AbsoluteUri;

			string nonce = System.Guid.NewGuid().ToString();
            string authSignature = this.Configuration.GetSignature(nonce, fullUri, "POST", localVarPostBody == null ? "" : localVarPostBody.ToString());
			localVarHeaderParams.Add("Authorization-Key", this.Configuration.ApiKey);
            localVarHeaderParams.Add("Authorization-Nonce", nonce);
			localVarHeaderParams.Add("Authorization-Signature", authSignature);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPoliticallyExposedPeople", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PoliticallyExposedPersonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PoliticallyExposedPersonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PoliticallyExposedPersonResponse)));
        }

    }
}
