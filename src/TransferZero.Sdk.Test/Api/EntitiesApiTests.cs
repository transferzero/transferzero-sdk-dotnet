/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TransferZero.Sdk.Client;
using TransferZero.Sdk.Api;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Test
{
    /// <summary>
    ///  Class for testing EntitiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EntitiesApiTests
    {
        private EntitiesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EntitiesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EntitiesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EntitiesApi
            //Assert.IsInstanceOfType(typeof(EntitiesApi), instance, "instance is a EntitiesApi");
        }

        
        /// <summary>
        /// Test GetEntities
        /// </summary>
        [Test]
        public void GetEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityType = null;
            //List<string> ids = null;
            //var response = instance.GetEntities(entityType, ids);
            //Assert.IsInstanceOf<EntityListResponse> (response, "response is EntityListResponse");
        }
        
        /// <summary>
        /// Test GetEntitiesByParams
        /// </summary>
        [Test]
        public void GetEntitiesByParamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityType = null;
            //string rating = null;
            //string state = null;
            //var response = instance.GetEntitiesByParams(entityType, rating, state);
            //Assert.IsInstanceOf<EntityListResponse> (response, "response is EntityListResponse");
        }
        
        /// <summary>
        /// Test GetEntity
        /// </summary>
        [Test]
        public void GetEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityType = null;
            //Guid? entityID = null;
            //var response = instance.GetEntity(entityType, entityID);
            //Assert.IsInstanceOf<EntityCreateResponse> (response, "response is EntityCreateResponse");
        }
        
        /// <summary>
        /// Test PatchEntity
        /// </summary>
        [Test]
        public void PatchEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityType = null;
            //Guid? entityID = null;
            //EntityUpdateRequest entityUpdateRequest = null;
            //var response = instance.PatchEntity(entityType, entityID, entityUpdateRequest);
            //Assert.IsInstanceOf<EntityUpdateResponse> (response, "response is EntityUpdateResponse");
        }
        
        /// <summary>
        /// Test PostEntity
        /// </summary>
        [Test]
        public void PostEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entityType = null;
            //Guid? entityID = null;
            //EntityCreateRequest entityCreateRequest = null;
            //var response = instance.PostEntity(entityType, entityID, entityCreateRequest);
            //Assert.IsInstanceOf<EntityCreateResponse> (response, "response is EntityCreateResponse");
        }
        
    }

}
