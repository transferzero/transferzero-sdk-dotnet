/* 
 * BitPesa Private API
 *
 * API specification used for internal BitPesa endpoints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TransferZero.Sdk.Client;
using TransferZero.Sdk.Api;
using TransferZero.Sdk.Model;

namespace TransferZero.Sdk.Test
{
    /// <summary>
    ///  Class for testing TransactionRequestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionRequestsApiTests
    {
        private TransactionRequestsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TransactionRequestsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TransactionRequestsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TransactionRequestsApi
            //Assert.IsInstanceOfType(typeof(TransactionRequestsApi), instance, "instance is a TransactionRequestsApi");
        }

        
        /// <summary>
        /// Test AddDocumentTransactionRequest
        /// </summary>
        [Test]
        public void AddDocumentTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionRequestID = null;
            //Guid? documentId = null;
            //var response = instance.AddDocumentTransactionRequest(transactionRequestID, documentId);
            //Assert.IsInstanceOf<DocumentResponse> (response, "response is DocumentResponse");
        }
        
        /// <summary>
        /// Test CancelTransactionRequest
        /// </summary>
        [Test]
        public void CancelTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionRequestID = null;
            //string reasonCancellation = null;
            //var response = instance.CancelTransactionRequest(transactionRequestID, reasonCancellation);
            //Assert.IsInstanceOf<TransactionReqResponse> (response, "response is TransactionReqResponse");
        }
        
        /// <summary>
        /// Test ConfirmTransactionRequest
        /// </summary>
        [Test]
        public void ConfirmTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionRequestID = null;
            //var response = instance.ConfirmTransactionRequest(transactionRequestID);
            //Assert.IsInstanceOf<TransactionReqResponse> (response, "response is TransactionReqResponse");
        }
        
        /// <summary>
        /// Test GetTransactionRequest
        /// </summary>
        [Test]
        public void GetTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionRequestID = null;
            //bool? versioned = null;
            //var response = instance.GetTransactionRequest(transactionRequestID, versioned);
            //Assert.IsInstanceOf<TransactionReqResponse> (response, "response is TransactionReqResponse");
        }
        
        /// <summary>
        /// Test GetTransactionRequests
        /// </summary>
        [Test]
        public void GetTransactionRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? per = null;
            //List<string> state = null;
            //List<string> currency = null;
            //string createdAtFrom = null;
            //string createdAtTo = null;
            //string amountFrom = null;
            //string amountTo = null;
            //string senderId = null;
            //bool? versioned = null;
            //List<string> tag = null;
            //List<string> ids = null;
            //List<string> included = null;
            //List<string> excluded = null;
            //var response = instance.GetTransactionRequests(page, per, state, currency, createdAtFrom, createdAtTo, amountFrom, amountTo, senderId, versioned, tag, ids, included, excluded);
            //Assert.IsInstanceOf<TransactionReqListResponse> (response, "response is TransactionReqListResponse");
        }
        
        /// <summary>
        /// Test PostTransactionRequest
        /// </summary>
        [Test]
        public void PostTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionReqRequest transactionReqRequest = null;
            //var response = instance.PostTransactionRequest(transactionReqRequest);
            //Assert.IsInstanceOf<TransactionReqResponse> (response, "response is TransactionReqResponse");
        }
        
        /// <summary>
        /// Test RestfulAddDocumentTransactionRequest
        /// </summary>
        [Test]
        public void RestfulAddDocumentTransactionRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? transactionRequestID = null;
            //Guid? documentID = null;
            //var response = instance.RestfulAddDocumentTransactionRequest(transactionRequestID, documentID);
            //Assert.IsInstanceOf<DocumentResponse> (response, "response is DocumentResponse");
        }
        
        /// <summary>
        /// Test TransactionRequestLimits
        /// </summary>
        [Test]
        public void TransactionRequestLimitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TransactionRequestLimits();
            //Assert.IsInstanceOf<TransactionReqLimitsResponse> (response, "response is TransactionReqLimitsResponse");
        }
        
        /// <summary>
        /// Test ValidateTransactionRequests
        /// </summary>
        [Test]
        public void ValidateTransactionRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionReqRequest transactionReqRequest = null;
            //var response = instance.ValidateTransactionRequests(transactionReqRequest);
            //Assert.IsInstanceOf<TransactionReqResponse> (response, "response is TransactionReqResponse");
        }
        
    }

}
